{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"COURSE INFORMATION COMP130010h.01: Introduction to Database College of Computer Science and Technology, Fudan University Meeting Time: Tuesday 11-13 / Friday 8-9 Lecture Location: HGX 201 / H Computing Centre 3# { Room 2 } Room 3 Midterm: Tuesday/2021-04-27 6:30-8:30 Final: Wed/2021-06-30 13:00-15:00 Overview Course Objective This course is designed to introduce the database system and help students to become proficient in its application. Topics include: Data models (relational, document, key/value) Storage models (n-ary, decomposition) Query languages (SQL, stored procedures) Storage architectures (heaps, log-structured) Indexing (order preserving trees, hash tables) Transaction processing (ACID, concurrency control) Recovery (logging, checkpoints) Query processing (joins, sorting, aggregation, optimization) Parallel architectures (multi-core, distributed) Homeworks There will be roughly weekly homework. These will generally consist of a number of written problems. Since there are also laboratory classes, these homework will not involve any programming. Important You are welcome to discuss these problems with other students, but this should be limited to discussions of high-level strategies and concepts. The actual write-up of the solutions must be your own. Homeworks needs to be submitted in class Every Tuesday . They can either be handwritten or typed (LATEX is recommended) and print. However, your work must be clear and legible to receive credit. Written solutions will not be posted, but the homework problems may be reviewed in Q&A recitations . Assignments In the first few weeks, there are several simple assignments to help students understand the practicalities of database operation, which are very easy since we will provide detailed instructions. We will post each assignment here in Friday's class , and students are required to complete the work and have it checked by TAs in class . Assignment-1 Assignment-2 Assignment-3 Projects In this course, students will be required to complete two course projects . Project-1 will be posted after the completion of the first few weeks of assignments and project-2 will be assigned after project-1 . Students will have plenty of time to complete both projects, which will not be too difficult and will focus more on the understanding and application of databases. Project-1 Project-2 Textbook \u6570\u636e\u5e93\u7cfb\u7edf\u6559\u7a0b(\u7b2c3\u7248)\u65bd\u4f2f\u4e50\uff0c\u4e01\u5b9d\u5eb7\uff0c\u6c6a\u536b \u8457 \u9ad8\u7b49\u6559\u80b2\u51fa\u7248\u793e \u672c\u79d1\u7814\u7a76\u751f\u6559\u6750 \u9ad8\u7b49\u6559\u80b2\u51fa\u7248\u793e Database Management Systems, 3rd Edition. By Raghu Ramakrishnan, Jhannes Gehrke TAs Xuanjie Fang Software Engineering, College of Computer Science and Technology Email: 20212010015@fudan.edu.cn location: J-Cross-science-2 E4006-02 Jie Shi Software Engineering, College of Computer Science and Technology Email: 20212010016@fudan.edu.cn location: J-Cross-science-2 E4006-03 Exams Final: Wed/2021-06-30 13:00-15:00 Closed book Grading Grades will be weighted as follows: Items Weight Midterm Exams 25% Final Exams 40% Assignments/Projects 35% If you have questions about the grading schema, please email us for contaction.","title":"HomePage"},{"location":"#course-information","text":"COMP130010h.01: Introduction to Database College of Computer Science and Technology, Fudan University Meeting Time: Tuesday 11-13 / Friday 8-9 Lecture Location: HGX 201 / H Computing Centre 3# { Room 2 } Room 3 Midterm: Tuesday/2021-04-27 6:30-8:30 Final: Wed/2021-06-30 13:00-15:00","title":"COURSE INFORMATION"},{"location":"#overview","text":"Course Objective This course is designed to introduce the database system and help students to become proficient in its application. Topics include: Data models (relational, document, key/value) Storage models (n-ary, decomposition) Query languages (SQL, stored procedures) Storage architectures (heaps, log-structured) Indexing (order preserving trees, hash tables) Transaction processing (ACID, concurrency control) Recovery (logging, checkpoints) Query processing (joins, sorting, aggregation, optimization) Parallel architectures (multi-core, distributed)","title":"Overview"},{"location":"#homeworks","text":"There will be roughly weekly homework. These will generally consist of a number of written problems. Since there are also laboratory classes, these homework will not involve any programming. Important You are welcome to discuss these problems with other students, but this should be limited to discussions of high-level strategies and concepts. The actual write-up of the solutions must be your own. Homeworks needs to be submitted in class Every Tuesday . They can either be handwritten or typed (LATEX is recommended) and print. However, your work must be clear and legible to receive credit. Written solutions will not be posted, but the homework problems may be reviewed in Q&A recitations .","title":"Homeworks"},{"location":"#assignments","text":"In the first few weeks, there are several simple assignments to help students understand the practicalities of database operation, which are very easy since we will provide detailed instructions. We will post each assignment here in Friday's class , and students are required to complete the work and have it checked by TAs in class . Assignment-1 Assignment-2 Assignment-3","title":"Assignments"},{"location":"#projects","text":"In this course, students will be required to complete two course projects . Project-1 will be posted after the completion of the first few weeks of assignments and project-2 will be assigned after project-1 . Students will have plenty of time to complete both projects, which will not be too difficult and will focus more on the understanding and application of databases. Project-1 Project-2","title":"Projects"},{"location":"#textbook","text":"\u6570\u636e\u5e93\u7cfb\u7edf\u6559\u7a0b(\u7b2c3\u7248)\u65bd\u4f2f\u4e50\uff0c\u4e01\u5b9d\u5eb7\uff0c\u6c6a\u536b \u8457 \u9ad8\u7b49\u6559\u80b2\u51fa\u7248\u793e \u672c\u79d1\u7814\u7a76\u751f\u6559\u6750 \u9ad8\u7b49\u6559\u80b2\u51fa\u7248\u793e Database Management Systems, 3rd Edition. By Raghu Ramakrishnan, Jhannes Gehrke","title":"Textbook"},{"location":"#tas","text":"Xuanjie Fang Software Engineering, College of Computer Science and Technology Email: 20212010015@fudan.edu.cn location: J-Cross-science-2 E4006-02 Jie Shi Software Engineering, College of Computer Science and Technology Email: 20212010016@fudan.edu.cn location: J-Cross-science-2 E4006-03","title":"TAs"},{"location":"#exams","text":"Final: Wed/2021-06-30 13:00-15:00 Closed book","title":"Exams"},{"location":"#grading","text":"Grades will be weighted as follows: Items Weight Midterm Exams 25% Final Exams 40% Assignments/Projects 35% If you have questions about the grading schema, please email us for contaction.","title":"Grading"},{"location":"Answer/assignment-2/","text":"Assignment-2 Answer Q1 \u67e5\u8be2\u4e0a\u6620\u65f6\u95f4 >= 2014\u5e74\u5e76\u4e14\u8bc4\u5206<=7.0\u7684\u7535\u5f71\uff0c \u8f93\u51fa:\u7535\u5f71\u6807\u9898\uff0c\u5bfc\u6f14\u59d3\u540d\uff0c\u8bc4\u5206( rating ) use movies ; select m . title , p . name , m . rating from movie m , person p where m . year >= 2014 and m . rating <= 7 . 0 and m . director = p . id count=348 Q2 \u67e5\u8be2\u8fd9\u6837\u7684\u5bfc\u6f14\u59d3\u540d\uff08\u5728 movie . director \u4e2d\u6709\u8bb0\u5f55\u7684\u5373\u5bfc\u6f14\uff09\uff0c\u8fd9\u4e9b\u5bfc\u6f14\u6ca1\u6709\u5728\u4efb\u4f55\u4e00\u90e8\u7535\u5f71\u4e2d\u62c5\u4efb\u6f14\u5458\u3002 \u8f93\u51fa\uff1a\u5bfc\u6f14\u59d3\u540d use movies ; select p . ` name ` from ` person ` as p where p . ` id ` in ( select ` director ` from ` movie ` ) and p . ` id ` not in ( select ` actor_id ` from ` movie_actor ` ); count=608 Q3 \u67e5\u8be2 Edward Norton \u6216\u8005 Aamir Khan \u53c2\u6f14\u8fc7\u7684\u6240\u6709\u7535\u5f71 \u8f93\u51fa: \u7535\u5f71\u6807\u9898,\u8be5\u7535\u5f71\u7684\u4e0a\u6620\u65f6\u95f4 use movies ; select m . title , m . year from movie m , movie_actor ma , person p where m . id = ma . movie_id and ( p . name = 'Edward Norton' or p . name = 'Aamir Khan' ) and p . id = ma . actor_id ; count=9 Q4 \u67e5\u8be2\u7c7b\u578b\u4e3a Action \u4e14 \u8bc4\u5206>8.0 \u7684\u7535\u5f71\uff0c\u5e76\u4e14\u8be5\u7535\u5f71\u7684\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71>=2\u90e8 \u8f93\u51fa:\u7535\u5f71\u6807\u9898,\u5bfc\u6f14\u59d3\u540d,\u8bc4\u5206 use movies ; select m . title , m . rating , p . name from movie_genre mg , movie m , genre g , person p where m . id = mg . movie_id and g . id = mg . genre_id and g . name = 'Action' and m . rating > 8 . 0 and p . id = m . director and m . director in ( select director from movie group by director having count ( * ) >= 2 ) count=11 ps: \u60f3\u4e0d\u6e05\u695a\u7684\u65f6\u5019\uff0c\u5148\u5168\u90e8\u8fde\u63a5\u83b7\u5f97\u6240\u6709\u9700\u8981\u7684\u5b57\u6bb5 where m.id=mg.movie_id and g.id = mg.genre_id and g.name='Action' and p.id = m.director \uff0c \u7136\u540e\u8003\u8651\u7528\u805a\u5408\u6765\u83b7\u5f97 >= 2 \u7684\u95ee\u9898\u3002 Q5 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u81f3\u5c11\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 select m . ` title ` , p . ` name ` from ` movie ` as m , ` person ` as p where m . ` director ` = p . ` id ` and exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` = 'Horror' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` = 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ); count=44 \u7b54\u6848\u7684\u601d\u8def\u662f\u5bf9\u6574\u4e2a\u7535\u5f71\u6761\u76ee\u8fdb\u884c exist \u5224\u65ad\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7535\u5f71\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u7c7b\u578b\u7b26\u5408\u9898\u76ee\u6761\u4ef6\u3002 \u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a in \uff0c m.id \u5728 movie_genre \u4e2d\u6709\u5bf9\u5e94 Horror \u4e5f\u6709\u5bf9\u5e94\u7684 Thriller Q6 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u4ec5\u4ec5\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 select m . ` title ` , p . ` name ` from ` movie ` as m , ` person ` as p where m . ` director ` = p . ` id ` and exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` = 'Horror' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` = 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ) and not exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` != 'Horror' and X2 . ` name ` != 'Thriller' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` != 'Horror' and Y2 . ` name ` != 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ); count=16 \u6709 Horror \u6216\u8005 Thriller , \u4f46\u4e0d\u540c\u65f6\u6709\u4e24\u4e2a \uff08\u770b\u7740\u957f\uff0c\u4f46\u662f\u4e5f\u5c31\u662f\u5199\u5f97\u957f\u4e86\u70b9\uff0c\u601d\u8def\u4e0d\u96be\uff09 Q7 \u67e5\u8be2\u57282014\u5e74\u4e4b\u524d\uff08\u5305\u62ec2014\uff09\uff0c\u6709\u8d85\u8fc73\u90e8\u7535\u5f71\u4e0a\u6620\u7684\u6f14\u5458\u4ee5\u53ca\u4ed6\u53c2\u6f14\u7684\u7535\u5f71\u540d \u8f93\u51fa: \u6f14\u5458\u540d\uff0c\u53c2\u6f14\u7684\u7535\u5f71\u540d\uff0c use movies ; select m . title , p . name from movie m , person p , movie_actor ma1 where m . id = ma1 . movie_id and p . id = ma1 . actor_id and m . year <= 2014 and ma1 . actor_id in ( select mg . actor_id from movie_actor mg , movie mm where mm . id = mg . movie_id and mm . year <= 2014 group by actor_id having count ( * ) > 3 ); count=848 \u6ce8\u610f\u70b9\uff1a\u8fd9\u9053\u9898\u5f88\u6709\u53ef\u80fd\u4f1a\u5728\u805a\u5408\u7684\u5730\u65b9\u4e0d\u589e\u52a02014\u5e74\u9650\u5236\uff0c\u4ece\u800c\u5bfc\u81f4\u7b54\u6848\u8d85\u8fc71000 Q8 \u67e5\u8be2\u6f14\u5458\uff0c\u8be5\u6f14\u5458\u53c2\u6f14\u4e86 Joss Whedon \u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\u3002 \u8f93\u51fa\uff1a\u6f14\u5458\u59d3\u540d select p . ` name ` from ` person ` as p where p . ` id ` in ( select ` actor_id ` from ` movie_actor ` ) and not exists ( select * from ` person ` as pp , ` movie ` as mm where pp . ` name ` = 'Joss Whedon' and mm . ` director ` = pp . ` id ` and not exists ( select * from ` movie_actor ` as ma where mm . ` id ` = ma . ` movie_id ` and ma . ` actor_id ` = p . ` id ` ) ); count=2 Q9 \u67e5\u8be2\u8fd9\u6837\u7684\u6f14\u5458\u4e0e\u5bfc\u6f14\uff0c\u8fd9\u4e2a\u6f14\u5458\u53c2\u6f14\u4e86\u8be5\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\uff0c\u4e14\u8be5\u5bfc\u6f14\u5bfc\u6f14\u4e86\u81f3\u5c112\u90e8\u7535\u5f71\u3002 \u8f93\u51fa\uff1a \u6f14\u5458\u59d3\u540d\uff0c\u5bfc\u6f14\u59d3\u540d select p . ` name ` , d . ` name ` from ` person ` as p , ` person ` as d where p . ` id ` in ( select ` actor_id ` from ` movie_actor ` ) and d . ` id ` in ( select X . ` director ` from ` movie ` as X , ` movie ` as Y where X . ` director ` = Y . ` director ` and X . ` id ` != Y . ` id ` ) and not exists ( select * from ` movie ` as m where m . ` director ` = d . ` id ` and not exists ( select * from ` movie_actor ` as ma where m . ` id ` = ma . ` movie_id ` and ma . ` actor_id ` = p . ` id ` ) ); count=50 Q10 * Additional Question \u67e5\u8be2\u6bcf\u4e00\u79cd\u7c7b\u578b\u7535\u5f71\u5bf9\u5e94\u7684\u5f71\u5e1d/\u5f71\u540e\uff08\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7c7b\u578b\uff0c\u8be5\u5f71\u5e1d/\u5f71\u540e\u81f3\u5c11\u6709\u4e09\u90e8\u7535\u5f71\u662f\u8fd9\u4e2a\u7c7b\u578b\uff0c\u5e76\u4e14\u5728\u6240\u6709\u81f3\u5c11\u53c2\u6f14\u4e863\u90e8\u8be5\u7c7b\u578b\u7535\u5f71\u7684\u6f14\u5458\u4e2d\uff0c\u83b7\u5f97\u7684\u5e73\u5747\u8bc4\u5206\u6700\u9ad8\uff09 \u8f93\u51fa\uff1a \u7c7b\u578b\uff0c\u6f14\u5458\u540d\uff0c\u5e73\u5747\u8bc4\u5206 \u8fd9\u9053\u9898\u6700\u7b80\u5355\u7684\u601d\u8def\u662f\uff1a \u5148\u628a\u6240\u6709\u7684\u8868\u8fde\u63a5\u8d77\u6765\uff08\u56e0\u4e3a\u6240\u9700\u7684\u5b57\u6bb5\u5206\u6563\u5728\u4e0d\u540c\u7684\u8868\u4e2d\uff09 \u5bf9 \uff08\u6f14\u5458\uff0c\u7c7b\u578b\uff09\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u505a \u805a\u5408\u5206\u7ec4 \uff0c\u5e76\u6309\u7167\u8fd9\u4e2a\u5206\u7ec4\u6c42\u51fa \u6bcf\u4e2a\u6f14\u5458\u5728\u6bcf\u4e2a\u7c7b\u578b\u4e0a\u7684\u6240\u6709\u7535\u5f71\u7684\u5e73\u5747\u5206\uff0c\u5e76\u5728\u805a\u5408\u4e2d\u589e\u52a0 count \u7b5b\u9009\u51fa\u8be5\u7c7b\u578b\u5bf9\u4e8e\u8be5\u6f14\u5458\u7535\u5f71\u6570\u5fc5\u987b>=3 \u7136\u540e\u5bf9\u7c7b\u578b\u5206\u7ec4\uff0c\u6c42\u51fa\u6700\u5927\u7684\u5e73\u5747\u5206 Ps: \u5f53\u6d89\u53ca\u5230\u5d4c\u5957\u5b50\u53e5\u6bd4\u8f83\u957f\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528 with \u6765\u4f18\u5316(\u5b9a\u4e49\u5b50\u53e5\u522b\u540d) with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ) \u8fd9\u4e2a whole \u5185\u90e8\u5b50\u53e5\u5b9e\u73b0\u7684\u5c31\u662f\u6b65\u9aa4\u7684\u524d\u4e24\u6b65\uff0c\u5f97\u5230\u4e86\uff08\u6f14\u5458\uff0c\u7c7b\u578b\uff09\u5bf9\u5e94\u7684\u5e73\u5747\u5f97\u5206 use movies ; with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ) select w . genre as genre , max ( w . avg_rating ) as max_rating from whole w group by genre \u5230\u4e86\u8fd9\u4e00\u6b65\u5c31\u6c42\u51fa\u4e86\u4e0a\u4e00\u6b65\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u578b\u5bf9\u5e94\u7684\u6700\u5927\u5e73\u5747\u5206 \u6700\u540e\u6c42\u51fa\u6700\u5927\u7684\u6761\u76ee use movies ; with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ), max_genre as ( select w . genre as genre , max ( w . avg_rating ) as max_rating from whole w group by genre ) select ww . actor as actor , ww . genre as genre , ww . avg_rating as rating from whole ww , max_genre as mg where ww . genre = mg . genre and ww . avg_rating >= mg . max_rating ; \u6ce8\u610f\uff0c\u4e00\u4e2a\u7c7b\u578b\u7684\u5f71\u5e1d/\u5f71\u540e\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff08\u5e73\u5747\u5206\u76f8\u540c\uff09 count=17 lujiayi\u540c\u5b66\u7684\u53e6\u4e00\u79cd\u5199\u6cd5\u66f4\u7b80\u6d01\u548c\u6613\u4e8e\u7406\u89e3 select g . name as genre , p . name , avg ( mm . rating ) as average_rating from movie_actor ma , movie mm , movie_genre mg , person p , genre g where mg . movie_id = mm . id and ma . movie_id = mm . id and g . id = mg . genre_id and p . id = ma . actor_id group by mg . genre_id , ma . actor_id having count ( * ) >= 3 and avg ( mm . rating ) >= all ( select avg ( m . rating ) from movie m , movie_genre mog , movie_actor moa where mog . genre_id = mg . genre_id and mog . movie_id = m . id and moa . movie_id = m . id group by moa . actor_id having count ( * ) >= 3 ) \u6700\u540e\uff1a\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u8fd0\u884c\u8fd9\u4e24\u79cd\u7b54\u6848\uff0c\u6bd4\u8f83\u4e00\u4e0b\u901f\u5ea6\u5dee\u5f02\uff0c\u4ee5\u53ca\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u6837\u7684\u901f\u5ea6\u5dee\u5f02\u3002","title":"Assignment-2 Answer"},{"location":"Answer/assignment-2/#assignment-2-answer","text":"Q1 \u67e5\u8be2\u4e0a\u6620\u65f6\u95f4 >= 2014\u5e74\u5e76\u4e14\u8bc4\u5206<=7.0\u7684\u7535\u5f71\uff0c \u8f93\u51fa:\u7535\u5f71\u6807\u9898\uff0c\u5bfc\u6f14\u59d3\u540d\uff0c\u8bc4\u5206( rating ) use movies ; select m . title , p . name , m . rating from movie m , person p where m . year >= 2014 and m . rating <= 7 . 0 and m . director = p . id count=348 Q2 \u67e5\u8be2\u8fd9\u6837\u7684\u5bfc\u6f14\u59d3\u540d\uff08\u5728 movie . director \u4e2d\u6709\u8bb0\u5f55\u7684\u5373\u5bfc\u6f14\uff09\uff0c\u8fd9\u4e9b\u5bfc\u6f14\u6ca1\u6709\u5728\u4efb\u4f55\u4e00\u90e8\u7535\u5f71\u4e2d\u62c5\u4efb\u6f14\u5458\u3002 \u8f93\u51fa\uff1a\u5bfc\u6f14\u59d3\u540d use movies ; select p . ` name ` from ` person ` as p where p . ` id ` in ( select ` director ` from ` movie ` ) and p . ` id ` not in ( select ` actor_id ` from ` movie_actor ` ); count=608 Q3 \u67e5\u8be2 Edward Norton \u6216\u8005 Aamir Khan \u53c2\u6f14\u8fc7\u7684\u6240\u6709\u7535\u5f71 \u8f93\u51fa: \u7535\u5f71\u6807\u9898,\u8be5\u7535\u5f71\u7684\u4e0a\u6620\u65f6\u95f4 use movies ; select m . title , m . year from movie m , movie_actor ma , person p where m . id = ma . movie_id and ( p . name = 'Edward Norton' or p . name = 'Aamir Khan' ) and p . id = ma . actor_id ; count=9 Q4 \u67e5\u8be2\u7c7b\u578b\u4e3a Action \u4e14 \u8bc4\u5206>8.0 \u7684\u7535\u5f71\uff0c\u5e76\u4e14\u8be5\u7535\u5f71\u7684\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71>=2\u90e8 \u8f93\u51fa:\u7535\u5f71\u6807\u9898,\u5bfc\u6f14\u59d3\u540d,\u8bc4\u5206 use movies ; select m . title , m . rating , p . name from movie_genre mg , movie m , genre g , person p where m . id = mg . movie_id and g . id = mg . genre_id and g . name = 'Action' and m . rating > 8 . 0 and p . id = m . director and m . director in ( select director from movie group by director having count ( * ) >= 2 ) count=11 ps: \u60f3\u4e0d\u6e05\u695a\u7684\u65f6\u5019\uff0c\u5148\u5168\u90e8\u8fde\u63a5\u83b7\u5f97\u6240\u6709\u9700\u8981\u7684\u5b57\u6bb5 where m.id=mg.movie_id and g.id = mg.genre_id and g.name='Action' and p.id = m.director \uff0c \u7136\u540e\u8003\u8651\u7528\u805a\u5408\u6765\u83b7\u5f97 >= 2 \u7684\u95ee\u9898\u3002 Q5 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u81f3\u5c11\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 select m . ` title ` , p . ` name ` from ` movie ` as m , ` person ` as p where m . ` director ` = p . ` id ` and exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` = 'Horror' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` = 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ); count=44 \u7b54\u6848\u7684\u601d\u8def\u662f\u5bf9\u6574\u4e2a\u7535\u5f71\u6761\u76ee\u8fdb\u884c exist \u5224\u65ad\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7535\u5f71\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u7c7b\u578b\u7b26\u5408\u9898\u76ee\u6761\u4ef6\u3002 \u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a in \uff0c m.id \u5728 movie_genre \u4e2d\u6709\u5bf9\u5e94 Horror \u4e5f\u6709\u5bf9\u5e94\u7684 Thriller Q6 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u4ec5\u4ec5\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 select m . ` title ` , p . ` name ` from ` movie ` as m , ` person ` as p where m . ` director ` = p . ` id ` and exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` = 'Horror' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` = 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ) and not exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` != 'Horror' and X2 . ` name ` != 'Thriller' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` != 'Horror' and Y2 . ` name ` != 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ); count=16 \u6709 Horror \u6216\u8005 Thriller , \u4f46\u4e0d\u540c\u65f6\u6709\u4e24\u4e2a \uff08\u770b\u7740\u957f\uff0c\u4f46\u662f\u4e5f\u5c31\u662f\u5199\u5f97\u957f\u4e86\u70b9\uff0c\u601d\u8def\u4e0d\u96be\uff09 Q7 \u67e5\u8be2\u57282014\u5e74\u4e4b\u524d\uff08\u5305\u62ec2014\uff09\uff0c\u6709\u8d85\u8fc73\u90e8\u7535\u5f71\u4e0a\u6620\u7684\u6f14\u5458\u4ee5\u53ca\u4ed6\u53c2\u6f14\u7684\u7535\u5f71\u540d \u8f93\u51fa: \u6f14\u5458\u540d\uff0c\u53c2\u6f14\u7684\u7535\u5f71\u540d\uff0c use movies ; select m . title , p . name from movie m , person p , movie_actor ma1 where m . id = ma1 . movie_id and p . id = ma1 . actor_id and m . year <= 2014 and ma1 . actor_id in ( select mg . actor_id from movie_actor mg , movie mm where mm . id = mg . movie_id and mm . year <= 2014 group by actor_id having count ( * ) > 3 ); count=848 \u6ce8\u610f\u70b9\uff1a\u8fd9\u9053\u9898\u5f88\u6709\u53ef\u80fd\u4f1a\u5728\u805a\u5408\u7684\u5730\u65b9\u4e0d\u589e\u52a02014\u5e74\u9650\u5236\uff0c\u4ece\u800c\u5bfc\u81f4\u7b54\u6848\u8d85\u8fc71000 Q8 \u67e5\u8be2\u6f14\u5458\uff0c\u8be5\u6f14\u5458\u53c2\u6f14\u4e86 Joss Whedon \u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\u3002 \u8f93\u51fa\uff1a\u6f14\u5458\u59d3\u540d select p . ` name ` from ` person ` as p where p . ` id ` in ( select ` actor_id ` from ` movie_actor ` ) and not exists ( select * from ` person ` as pp , ` movie ` as mm where pp . ` name ` = 'Joss Whedon' and mm . ` director ` = pp . ` id ` and not exists ( select * from ` movie_actor ` as ma where mm . ` id ` = ma . ` movie_id ` and ma . ` actor_id ` = p . ` id ` ) ); count=2 Q9 \u67e5\u8be2\u8fd9\u6837\u7684\u6f14\u5458\u4e0e\u5bfc\u6f14\uff0c\u8fd9\u4e2a\u6f14\u5458\u53c2\u6f14\u4e86\u8be5\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\uff0c\u4e14\u8be5\u5bfc\u6f14\u5bfc\u6f14\u4e86\u81f3\u5c112\u90e8\u7535\u5f71\u3002 \u8f93\u51fa\uff1a \u6f14\u5458\u59d3\u540d\uff0c\u5bfc\u6f14\u59d3\u540d select p . ` name ` , d . ` name ` from ` person ` as p , ` person ` as d where p . ` id ` in ( select ` actor_id ` from ` movie_actor ` ) and d . ` id ` in ( select X . ` director ` from ` movie ` as X , ` movie ` as Y where X . ` director ` = Y . ` director ` and X . ` id ` != Y . ` id ` ) and not exists ( select * from ` movie ` as m where m . ` director ` = d . ` id ` and not exists ( select * from ` movie_actor ` as ma where m . ` id ` = ma . ` movie_id ` and ma . ` actor_id ` = p . ` id ` ) ); count=50 Q10 * Additional Question \u67e5\u8be2\u6bcf\u4e00\u79cd\u7c7b\u578b\u7535\u5f71\u5bf9\u5e94\u7684\u5f71\u5e1d/\u5f71\u540e\uff08\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7c7b\u578b\uff0c\u8be5\u5f71\u5e1d/\u5f71\u540e\u81f3\u5c11\u6709\u4e09\u90e8\u7535\u5f71\u662f\u8fd9\u4e2a\u7c7b\u578b\uff0c\u5e76\u4e14\u5728\u6240\u6709\u81f3\u5c11\u53c2\u6f14\u4e863\u90e8\u8be5\u7c7b\u578b\u7535\u5f71\u7684\u6f14\u5458\u4e2d\uff0c\u83b7\u5f97\u7684\u5e73\u5747\u8bc4\u5206\u6700\u9ad8\uff09 \u8f93\u51fa\uff1a \u7c7b\u578b\uff0c\u6f14\u5458\u540d\uff0c\u5e73\u5747\u8bc4\u5206 \u8fd9\u9053\u9898\u6700\u7b80\u5355\u7684\u601d\u8def\u662f\uff1a \u5148\u628a\u6240\u6709\u7684\u8868\u8fde\u63a5\u8d77\u6765\uff08\u56e0\u4e3a\u6240\u9700\u7684\u5b57\u6bb5\u5206\u6563\u5728\u4e0d\u540c\u7684\u8868\u4e2d\uff09 \u5bf9 \uff08\u6f14\u5458\uff0c\u7c7b\u578b\uff09\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u505a \u805a\u5408\u5206\u7ec4 \uff0c\u5e76\u6309\u7167\u8fd9\u4e2a\u5206\u7ec4\u6c42\u51fa \u6bcf\u4e2a\u6f14\u5458\u5728\u6bcf\u4e2a\u7c7b\u578b\u4e0a\u7684\u6240\u6709\u7535\u5f71\u7684\u5e73\u5747\u5206\uff0c\u5e76\u5728\u805a\u5408\u4e2d\u589e\u52a0 count \u7b5b\u9009\u51fa\u8be5\u7c7b\u578b\u5bf9\u4e8e\u8be5\u6f14\u5458\u7535\u5f71\u6570\u5fc5\u987b>=3 \u7136\u540e\u5bf9\u7c7b\u578b\u5206\u7ec4\uff0c\u6c42\u51fa\u6700\u5927\u7684\u5e73\u5747\u5206 Ps: \u5f53\u6d89\u53ca\u5230\u5d4c\u5957\u5b50\u53e5\u6bd4\u8f83\u957f\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528 with \u6765\u4f18\u5316(\u5b9a\u4e49\u5b50\u53e5\u522b\u540d) with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ) \u8fd9\u4e2a whole \u5185\u90e8\u5b50\u53e5\u5b9e\u73b0\u7684\u5c31\u662f\u6b65\u9aa4\u7684\u524d\u4e24\u6b65\uff0c\u5f97\u5230\u4e86\uff08\u6f14\u5458\uff0c\u7c7b\u578b\uff09\u5bf9\u5e94\u7684\u5e73\u5747\u5f97\u5206 use movies ; with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ) select w . genre as genre , max ( w . avg_rating ) as max_rating from whole w group by genre \u5230\u4e86\u8fd9\u4e00\u6b65\u5c31\u6c42\u51fa\u4e86\u4e0a\u4e00\u6b65\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u578b\u5bf9\u5e94\u7684\u6700\u5927\u5e73\u5747\u5206 \u6700\u540e\u6c42\u51fa\u6700\u5927\u7684\u6761\u76ee use movies ; with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ), max_genre as ( select w . genre as genre , max ( w . avg_rating ) as max_rating from whole w group by genre ) select ww . actor as actor , ww . genre as genre , ww . avg_rating as rating from whole ww , max_genre as mg where ww . genre = mg . genre and ww . avg_rating >= mg . max_rating ; \u6ce8\u610f\uff0c\u4e00\u4e2a\u7c7b\u578b\u7684\u5f71\u5e1d/\u5f71\u540e\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff08\u5e73\u5747\u5206\u76f8\u540c\uff09 count=17 lujiayi\u540c\u5b66\u7684\u53e6\u4e00\u79cd\u5199\u6cd5\u66f4\u7b80\u6d01\u548c\u6613\u4e8e\u7406\u89e3 select g . name as genre , p . name , avg ( mm . rating ) as average_rating from movie_actor ma , movie mm , movie_genre mg , person p , genre g where mg . movie_id = mm . id and ma . movie_id = mm . id and g . id = mg . genre_id and p . id = ma . actor_id group by mg . genre_id , ma . actor_id having count ( * ) >= 3 and avg ( mm . rating ) >= all ( select avg ( m . rating ) from movie m , movie_genre mog , movie_actor moa where mog . genre_id = mg . genre_id and mog . movie_id = m . id and moa . movie_id = m . id group by moa . actor_id having count ( * ) >= 3 ) \u6700\u540e\uff1a\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u8fd0\u884c\u8fd9\u4e24\u79cd\u7b54\u6848\uff0c\u6bd4\u8f83\u4e00\u4e0b\u901f\u5ea6\u5dee\u5f02\uff0c\u4ee5\u53ca\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u6837\u7684\u901f\u5ea6\u5dee\u5f02\u3002","title":"Assignment-2 Answer"},{"location":"Answer/assignment-3/","text":"Assignment-3 Answer 3.7 Q1 \u7edf\u8ba1\u6709\u5b66\u751f\u9009\u4fee\u7684\u8bfe\u7a0b\u95e8\u6570 \u8f93\u51fa: count use school ; select count ( distinct cid ) from sc ; count=201 Q2 \u9009\u4feeC4\u8bfe\u7a0b\u7684\u5973\u5b66\u751f\u7684\u5e73\u5747\u5e74\u9f84 \u8f93\u51fa: avg_age use school ; select avg ( s . age ) from sc , s where sc . sid = s . id and s . sex = 'F' and sc . cid = 'C4' avg=19.8780 Q3 LIU \u8001\u5e08\u6240\u6388\u8bfe\u7a0b\u7684\u6bcf\u95e8\u8bfe\u7a0b\u7684\u5e73\u5747\u6210\u7ee9 \u8bfe\u7a0bID\uff0c\u5e73\u5747\u6210\u7ee9 use school ; select sc . cid , avg ( sc . score ) from sc , t , c where sc . cid = c . id and c . tid = t . id and t . tname = 'LIU' group by sc . cid ; C200 , 80.994595 C201 , 79.469474 Q4 \u6bcf\u95e8\u8bfe\u7a0b\u7684\u5b66\u751f\u9009\u4fee\u4eba\u6570\uff0c\u5e76\u4e14\u53ea\u7edf\u8ba1\u9009\u8bfe\u4eba\u6570>10\u7684\u8bfe\u7a0b \u8f93\u51fa: \u8bfe\u7a0bID\uff0c\u4eba\u6570 \u6392\u5e8f\uff1a\u4eba\u6570\u964d\u5e8f\uff0c\u76f8\u540c\u5219\u6309\u8bfe\u7a0b\u53f7\u5347\u5e8f use school ; select sc . cid , count ( * ) as num from sc group by sc . cid having num > 10 order by num desc , sc . cid ASC ; C19, 96 Q5 \u5b66\u53f7\u6bd4 WANG \u540c\u5b66\u5927\uff0c\u5e74\u9f84\u6bd4\u4ed6\u5c0f\u7684\u5b66\u751f\u59d3\u540d \u8f93\u51fa: \u5b66\u751f\u59d3\u540d use school ; select x . sname from s as x , s as y where y . sname = 'WANG' and x . id > y . id and x . age < y . age ; count=4\uff1a CHA ZENG YOU JI Q6 \u8868SC\u4e2d\uff0c\u67e5\u627e\u6210\u7ee9\u4e3a\u7a7a\u7684\u5b66\u751f \u8f93\u51fa: \u5b66\u53f7\uff0c\u5b66\u751f\u59d3\u540d use school ; select s . id , sname from s , sc where score is null ; count=0 Q7 \u59d3\u540d\u4ee5 L \u6253\u5934\u7684\u6240\u6709\u5b66\u751f \u8f93\u51fa: \u59d3\u540d\uff0c\u5e74\u9f84 use school ; select sname , age from s where sname like 'L%' ; count=10 Q8 \u5e74\u9f84\u5927\u4e8e\u5973\u540c\u5b66\u5e73\u5747\u5e74\u9f84\u7684\u7537\u751f \u8f93\u51fa: \u59d3\u540d\uff0c \u5e74\u9f84 use school ; select x . sname , x . age from s as x where x . sex = 'M' and x . age > ( select avg ( y . age ) from s as y where y . sex = 'F' ); count=53 Q9 \u5e74\u9f84\u5927\u4e8e\u6240\u6709\u5973\u540c\u5b66\u5e74\u9f84\u7684\u7537\u751f \u8f93\u51fa: \u59d3\u540d\uff0c \u5e74\u9f84 use school ; select x . sname , x . age from s as x where x . sex = 'M' and x . age > all ( select y . age from s as y where y . sex = 'F' ); count=0 3.13 Q1 \u7528create table \u521b\u5efa\u4e09\u4e2a\u8868\u7684\u526f\u672c\uff0c\u547d\u540d\u4e3a xx_copy , xx \u4e3a\u539f\u8868\u540d \u9700\u8981\u6307\u51fa\u4e3b\u952e\u548c\u5916\u952e \u5e76\u4e14\u5bfc\u5165\u539f\u8868\u6240\u6709\u6570\u636e use employment ; CREATE TABLE ` comp_copy ` ( ` id ` varchar ( 10 ) NOT NULL , ` cname ` varchar ( 20 ) NOT NULL , PRIMARY KEY ( ` id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; CREATE TABLE ` emp_copy ` ( ` id ` varchar ( 10 ) NOT NULL , ` ename ` varchar ( 20 ) NOT NULL , ` age ` int DEFAULT NULL , ` sex ` char ( 1 ) DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; CREATE TABLE ` works_copy ` ( ` eid ` varchar ( 10 ) NOT NULL , ` cid ` varchar ( 10 ) NOT NULL , ` salary ` int DEFAULT NULL , PRIMARY KEY ( ` eid ` , ` cid ` ), KEY ` works_copy ` ( ` cid ` ), CONSTRAINT ` works_ibfk_1_1 ` FOREIGN KEY ( ` eid ` ) REFERENCES ` emp_copy ` ( ` id ` ), CONSTRAINT ` works_ibfk_2_2 ` FOREIGN KEY ( ` cid ` ) REFERENCES ` comp_copy ` ( ` id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; INSERT INTO emp_copy SELECT * FROM emp ; INSERT INTO comp_copy SELECT * FROM comp ; INSERT INTO works_copy SELECT * FROM works ; Q2 \u5e74\u9f84>50\u7684\u7537\u804c\u5de5\u7684\u5de5\u53f7\u548c\u59d3\u540d \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d use employment ; select id , ename from emp where age > 50 and sex = 'M' ; count=8 Q3 \uff08\u4fee\u6539\u8fc7\uff09 \u67e5\u627e\u5728\u4e00\u4e2a\u4efb\u610f\u4e00\u4e2a\u516c\u53f8\u5de5\u8d44\u8d85\u8fc71000\u5143\u7684\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d \u53bb\u91cd use employment ; select distinct emp . id , ename from works , emp where salary > 1000 and eid = emp . id ; count=240 Q4 \u81f3\u5c11\u5728 C4 \u548c C8 \u516c\u53f8\u517c\u804c\u7684\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d use employment ; select emp . id , emp . ename from emp , works w1 , works w2 where w1 . cid = 'C4' and w2 . cid = 'C8' and w1 . eid = w2 . eid and w1 . eid = emp . id ; count=59 Q5 \u5728 Facebook \u5de5\u4f5c\uff0c\u5de5\u8d44\u8d85\u8fc71000\u5143\u7684\u7537\u6027\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c\u59d3\u540d use employment ; select emp . id , emp . ename from comp , emp , works where emp . id = works . eid and emp . sex = 'M' and comp . id = works . cid and comp . cname = 'Facebook' and works . salary > 1000 ; count=36 Q6 \u6bcf\u4e2a\u804c\u5de5\u517c\u804c\u7684\u516c\u53f8\u6570\u76ee\u548c\u5de5\u8d44\u603b\u6570 \u8f93\u51fa: \u5de5\u53f7\uff0cNUM, SUM_SALARY use employment ; select eid , count ( cid ), sum ( salary ) from works group by eid ; s1, 5, 5077 Q7 \u67e5\u627e\u804c\u5de5\uff0c\u8be5\u804c\u5de5\u5728 S6 \u6240\u5728\u7684\u5168\u90e8\u516c\u53f8\u90fd\u6709\u517c\u804c \u8f93\u51fa: \u5de5\u53f7 use employment ; select distinct w1 . eid from works w1 where not exists ( /*\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u516c\u53f8*/ select * from works w2 where w2 . eid = 'S6' and w2 . cid not in ( /* S6\u5728\u8be5\u516c\u53f8\uff0c\u4f46\u662fw1.eid\u4e0d\u5728*/ select w3 . cid from works w3 where w3 . eid = w1 . eid ) ) count=5 Q8 \u5728 Tencent \u4e2d\u641c\u7d22\u4f4e\u4e8e\u672c\u516c\u53f8\u5e73\u5747\u5de5\u8d44\u7684\u5458\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c\u59d3\u540d, \u5de5\u8d44 select emp . id , ename , salary from emp , works , comp where comp . cname = 'Tencent' and comp . id = works . cid and emp . id = works . eid and salary < ( select avg ( salary ) from works as w , comp as c where c . cname = 'Tencent' and c . id = w . cid ) count=59 Q9 \u5728Q1\u521b\u5efa\u7684\u526f\u672c\u4e2d\uff0c\u4e3a\u6bcf\u4e00\u4e2a\u516c\u53f8\u768450\u5c81\u4ee5\u4e0a\u7684\u5458\u5de5\u52a0\u85aa100\u5143 \u82e5\u804c\u5de5\u4e3a\u591a\u4e2a\u516c\u53f8\u5de5\u4f5c\uff0c\u53ef\u91cd\u590d\u52a0 use employment ; update works_copy set salary = salary + 100 where eid in ( select id from emp where age > 50 ) Q10 \u5728Q1\u521b\u5efa\u7684\u526f\u672c\u4e2d\uff0c\u5220\u9664 emp_copy \u548c works_copy \u4e2d\u5e74\u9f84>60\u7684\u6709\u5173\u5143\u7ec4 use employment ; delete from works_copy where eid in ( select id from emp where age > 60 ); delete from emp_copy where age > 60","title":"Assignment-3 Answer"},{"location":"Answer/assignment-3/#assignment-3-answer","text":"","title":"Assignment-3 Answer"},{"location":"Answer/assignment-3/#37","text":"Q1 \u7edf\u8ba1\u6709\u5b66\u751f\u9009\u4fee\u7684\u8bfe\u7a0b\u95e8\u6570 \u8f93\u51fa: count use school ; select count ( distinct cid ) from sc ; count=201 Q2 \u9009\u4feeC4\u8bfe\u7a0b\u7684\u5973\u5b66\u751f\u7684\u5e73\u5747\u5e74\u9f84 \u8f93\u51fa: avg_age use school ; select avg ( s . age ) from sc , s where sc . sid = s . id and s . sex = 'F' and sc . cid = 'C4' avg=19.8780 Q3 LIU \u8001\u5e08\u6240\u6388\u8bfe\u7a0b\u7684\u6bcf\u95e8\u8bfe\u7a0b\u7684\u5e73\u5747\u6210\u7ee9 \u8bfe\u7a0bID\uff0c\u5e73\u5747\u6210\u7ee9 use school ; select sc . cid , avg ( sc . score ) from sc , t , c where sc . cid = c . id and c . tid = t . id and t . tname = 'LIU' group by sc . cid ; C200 , 80.994595 C201 , 79.469474 Q4 \u6bcf\u95e8\u8bfe\u7a0b\u7684\u5b66\u751f\u9009\u4fee\u4eba\u6570\uff0c\u5e76\u4e14\u53ea\u7edf\u8ba1\u9009\u8bfe\u4eba\u6570>10\u7684\u8bfe\u7a0b \u8f93\u51fa: \u8bfe\u7a0bID\uff0c\u4eba\u6570 \u6392\u5e8f\uff1a\u4eba\u6570\u964d\u5e8f\uff0c\u76f8\u540c\u5219\u6309\u8bfe\u7a0b\u53f7\u5347\u5e8f use school ; select sc . cid , count ( * ) as num from sc group by sc . cid having num > 10 order by num desc , sc . cid ASC ; C19, 96 Q5 \u5b66\u53f7\u6bd4 WANG \u540c\u5b66\u5927\uff0c\u5e74\u9f84\u6bd4\u4ed6\u5c0f\u7684\u5b66\u751f\u59d3\u540d \u8f93\u51fa: \u5b66\u751f\u59d3\u540d use school ; select x . sname from s as x , s as y where y . sname = 'WANG' and x . id > y . id and x . age < y . age ; count=4\uff1a CHA ZENG YOU JI Q6 \u8868SC\u4e2d\uff0c\u67e5\u627e\u6210\u7ee9\u4e3a\u7a7a\u7684\u5b66\u751f \u8f93\u51fa: \u5b66\u53f7\uff0c\u5b66\u751f\u59d3\u540d use school ; select s . id , sname from s , sc where score is null ; count=0 Q7 \u59d3\u540d\u4ee5 L \u6253\u5934\u7684\u6240\u6709\u5b66\u751f \u8f93\u51fa: \u59d3\u540d\uff0c\u5e74\u9f84 use school ; select sname , age from s where sname like 'L%' ; count=10 Q8 \u5e74\u9f84\u5927\u4e8e\u5973\u540c\u5b66\u5e73\u5747\u5e74\u9f84\u7684\u7537\u751f \u8f93\u51fa: \u59d3\u540d\uff0c \u5e74\u9f84 use school ; select x . sname , x . age from s as x where x . sex = 'M' and x . age > ( select avg ( y . age ) from s as y where y . sex = 'F' ); count=53 Q9 \u5e74\u9f84\u5927\u4e8e\u6240\u6709\u5973\u540c\u5b66\u5e74\u9f84\u7684\u7537\u751f \u8f93\u51fa: \u59d3\u540d\uff0c \u5e74\u9f84 use school ; select x . sname , x . age from s as x where x . sex = 'M' and x . age > all ( select y . age from s as y where y . sex = 'F' ); count=0","title":"3.7"},{"location":"Answer/assignment-3/#313","text":"Q1 \u7528create table \u521b\u5efa\u4e09\u4e2a\u8868\u7684\u526f\u672c\uff0c\u547d\u540d\u4e3a xx_copy , xx \u4e3a\u539f\u8868\u540d \u9700\u8981\u6307\u51fa\u4e3b\u952e\u548c\u5916\u952e \u5e76\u4e14\u5bfc\u5165\u539f\u8868\u6240\u6709\u6570\u636e use employment ; CREATE TABLE ` comp_copy ` ( ` id ` varchar ( 10 ) NOT NULL , ` cname ` varchar ( 20 ) NOT NULL , PRIMARY KEY ( ` id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; CREATE TABLE ` emp_copy ` ( ` id ` varchar ( 10 ) NOT NULL , ` ename ` varchar ( 20 ) NOT NULL , ` age ` int DEFAULT NULL , ` sex ` char ( 1 ) DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; CREATE TABLE ` works_copy ` ( ` eid ` varchar ( 10 ) NOT NULL , ` cid ` varchar ( 10 ) NOT NULL , ` salary ` int DEFAULT NULL , PRIMARY KEY ( ` eid ` , ` cid ` ), KEY ` works_copy ` ( ` cid ` ), CONSTRAINT ` works_ibfk_1_1 ` FOREIGN KEY ( ` eid ` ) REFERENCES ` emp_copy ` ( ` id ` ), CONSTRAINT ` works_ibfk_2_2 ` FOREIGN KEY ( ` cid ` ) REFERENCES ` comp_copy ` ( ` id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; INSERT INTO emp_copy SELECT * FROM emp ; INSERT INTO comp_copy SELECT * FROM comp ; INSERT INTO works_copy SELECT * FROM works ; Q2 \u5e74\u9f84>50\u7684\u7537\u804c\u5de5\u7684\u5de5\u53f7\u548c\u59d3\u540d \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d use employment ; select id , ename from emp where age > 50 and sex = 'M' ; count=8 Q3 \uff08\u4fee\u6539\u8fc7\uff09 \u67e5\u627e\u5728\u4e00\u4e2a\u4efb\u610f\u4e00\u4e2a\u516c\u53f8\u5de5\u8d44\u8d85\u8fc71000\u5143\u7684\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d \u53bb\u91cd use employment ; select distinct emp . id , ename from works , emp where salary > 1000 and eid = emp . id ; count=240 Q4 \u81f3\u5c11\u5728 C4 \u548c C8 \u516c\u53f8\u517c\u804c\u7684\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d use employment ; select emp . id , emp . ename from emp , works w1 , works w2 where w1 . cid = 'C4' and w2 . cid = 'C8' and w1 . eid = w2 . eid and w1 . eid = emp . id ; count=59 Q5 \u5728 Facebook \u5de5\u4f5c\uff0c\u5de5\u8d44\u8d85\u8fc71000\u5143\u7684\u7537\u6027\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c\u59d3\u540d use employment ; select emp . id , emp . ename from comp , emp , works where emp . id = works . eid and emp . sex = 'M' and comp . id = works . cid and comp . cname = 'Facebook' and works . salary > 1000 ; count=36 Q6 \u6bcf\u4e2a\u804c\u5de5\u517c\u804c\u7684\u516c\u53f8\u6570\u76ee\u548c\u5de5\u8d44\u603b\u6570 \u8f93\u51fa: \u5de5\u53f7\uff0cNUM, SUM_SALARY use employment ; select eid , count ( cid ), sum ( salary ) from works group by eid ; s1, 5, 5077 Q7 \u67e5\u627e\u804c\u5de5\uff0c\u8be5\u804c\u5de5\u5728 S6 \u6240\u5728\u7684\u5168\u90e8\u516c\u53f8\u90fd\u6709\u517c\u804c \u8f93\u51fa: \u5de5\u53f7 use employment ; select distinct w1 . eid from works w1 where not exists ( /*\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u516c\u53f8*/ select * from works w2 where w2 . eid = 'S6' and w2 . cid not in ( /* S6\u5728\u8be5\u516c\u53f8\uff0c\u4f46\u662fw1.eid\u4e0d\u5728*/ select w3 . cid from works w3 where w3 . eid = w1 . eid ) ) count=5 Q8 \u5728 Tencent \u4e2d\u641c\u7d22\u4f4e\u4e8e\u672c\u516c\u53f8\u5e73\u5747\u5de5\u8d44\u7684\u5458\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c\u59d3\u540d, \u5de5\u8d44 select emp . id , ename , salary from emp , works , comp where comp . cname = 'Tencent' and comp . id = works . cid and emp . id = works . eid and salary < ( select avg ( salary ) from works as w , comp as c where c . cname = 'Tencent' and c . id = w . cid ) count=59 Q9 \u5728Q1\u521b\u5efa\u7684\u526f\u672c\u4e2d\uff0c\u4e3a\u6bcf\u4e00\u4e2a\u516c\u53f8\u768450\u5c81\u4ee5\u4e0a\u7684\u5458\u5de5\u52a0\u85aa100\u5143 \u82e5\u804c\u5de5\u4e3a\u591a\u4e2a\u516c\u53f8\u5de5\u4f5c\uff0c\u53ef\u91cd\u590d\u52a0 use employment ; update works_copy set salary = salary + 100 where eid in ( select id from emp where age > 50 ) Q10 \u5728Q1\u521b\u5efa\u7684\u526f\u672c\u4e2d\uff0c\u5220\u9664 emp_copy \u548c works_copy \u4e2d\u5e74\u9f84>60\u7684\u6709\u5173\u5143\u7ec4 use employment ; delete from works_copy where eid in ( select id from emp where age > 60 ); delete from emp_copy where age > 60","title":"3.13"},{"location":"Assignment/assignment1/","text":"Assignment 1 Overview The first assignment is to set up a local database environment and be able to perform basic operations using the client. This task is an opportunity to: Learn how to launch the database service Get familiar with using a client to connect the database service and perform basic operations, which can be useful for you in the future. Release Date: March 05, 2021 / 15:25 Due Date: March 05, 2021 / 17:10 Quick Start Before setting up a local database in your own computer, you can try with computers in laboratory. In the desktop, you will see a folder named \"\u6570\u636e\u5e93\u5f15\u8bba\" Then double click the \"Mysql Workbench.exe\" inside to start the application. You will also see a txt file called \"mysql_password\" , which will be used when connecting. Once you establish connection successfully, you can try this simple task Specification Then you need to install both mysql-server and mysql-client in your own computer. Server Download Address You can come here for reference Hint Please choose the version that corresponds to your operating system Then click the No thanks, just start my download. If you have installed and configured the environment path, you can try the following commands to determine whether the installation is successful $ mysql -u root -p $ mysql> show databases; Client We recommend these two client tools Download address: Hint Please choose the version that corresponds to your operating system Navicat (It's not free) Mysql Workbench the default port will be 3306 Simple task After all the above steps are completed, you are required to do following create a new schema use command CREATE SCHEMA ` intro_db ` ; use client tool Create a new table use command CREATE TABLE ` intro_db ` . ` course ` ( ` id ` INT NOT NULL , ` name ` VARCHAR ( 45 ) NOT NULL , PRIMARY KEY ( ` id ` )); use client tool Insert a new data use command Insert into ` intro_db ` . ` course ` ( id , name ) values ( 2 , 'amy' ); use client tool","title":"Assignment-1"},{"location":"Assignment/assignment1/#assignment-1","text":"","title":"Assignment 1"},{"location":"Assignment/assignment1/#overview","text":"The first assignment is to set up a local database environment and be able to perform basic operations using the client. This task is an opportunity to: Learn how to launch the database service Get familiar with using a client to connect the database service and perform basic operations, which can be useful for you in the future. Release Date: March 05, 2021 / 15:25 Due Date: March 05, 2021 / 17:10","title":"Overview"},{"location":"Assignment/assignment1/#quick-start","text":"Before setting up a local database in your own computer, you can try with computers in laboratory. In the desktop, you will see a folder named \"\u6570\u636e\u5e93\u5f15\u8bba\" Then double click the \"Mysql Workbench.exe\" inside to start the application. You will also see a txt file called \"mysql_password\" , which will be used when connecting. Once you establish connection successfully, you can try this simple task","title":"Quick Start"},{"location":"Assignment/assignment1/#_1","text":"","title":""},{"location":"Assignment/assignment1/#specification","text":"Then you need to install both mysql-server and mysql-client in your own computer.","title":"Specification"},{"location":"Assignment/assignment1/#server","text":"Download Address You can come here for reference Hint Please choose the version that corresponds to your operating system Then click the No thanks, just start my download. If you have installed and configured the environment path, you can try the following commands to determine whether the installation is successful $ mysql -u root -p $ mysql> show databases;","title":"Server"},{"location":"Assignment/assignment1/#client","text":"We recommend these two client tools Download address: Hint Please choose the version that corresponds to your operating system Navicat (It's not free) Mysql Workbench the default port will be 3306","title":"Client"},{"location":"Assignment/assignment1/#simple-task","text":"After all the above steps are completed, you are required to do following create a new schema use command CREATE SCHEMA ` intro_db ` ; use client tool Create a new table use command CREATE TABLE ` intro_db ` . ` course ` ( ` id ` INT NOT NULL , ` name ` VARCHAR ( 45 ) NOT NULL , PRIMARY KEY ( ` id ` )); use client tool Insert a new data use command Insert into ` intro_db ` . ` course ` ( id , name ) values ( 2 , 'amy' ); use client tool","title":"Simple task"},{"location":"Assignment/assignment2/","text":"Assignment 2 Overview The second homework is to construct a set of SQL queries for data analysis. For this, we will provide some natural language level query questions that students will need to convert into sql statements. Students will also be required to run these sql queries and have them checked by the TAs in class . This task is an opportunity to: Learn basic and certain advanced SQL features Get familiar with using and applying sql in specific application scenarios Release Date: March 12, 2021 / 15:25 Due Date: March 12, 2021 / 17:10 Preliminary Download You need to download the DataSet we have prepared for you in the elearning . movies.sql Loading data Open Mysql Workbench , click the corresponding tab to import movies.sql downloaded in the previous step. Then click the run button (It looks like \u26a1\ufe0f), you'll see a series of success logs below. Finally, click the refresh button in the sidebar. A schema called movies has been loaded sucessfully. Simple tutorials Hint Before writing SQL statements, please carefully observe the column name and structure of each table. A clearer understanding of the overall architecture will help you quickly and accurately finish this work. Table Structure Genre Column Type Example Id Int 1 Name Varchar \"Action\" movie Column Type Example Id Int 1 Title Varchar \"(500) Days of Summer\" Description Varchar \"Desc\" Director Int (person's id) 123 Year Int 2014 Length Int 95 Rating Double 8.0 Votes Int 9830 Revenue Double 98982.3 Metascore Int 76 movie_actor A movie can correspond to multiple actors Column Type Example Id Int 1 movie_id Int 1 actor_id Int 2 movie_genre A movie can correspond to multiple genres Column Type Example Id Int 1 movie_id Int 1 genre_id Int 2 person Column Type Example Id Int 1 Name Varchar \"amy\" Examples E1 \u67e5\u8be2 Edward Norton \u53c2\u6f14\u7684\u6240\u6709\u7535\u5f71\u7684\u6807\u9898 use movies ; select m . title from movie m , movie_actor ma , person p where m . id = ma . movie_id and p . id = ma . actor_id and p . name = 'Edward Norton' ; E2: \u67e5\u8be2\u6267\u5bfc\u7535\u5f71\u8d85\u8fc73\u90e8\u7684\u5bfc\u6f14\u540d\u79f0 \u8f93\u51fa: \u5bfc\u6f14\u540d\uff0c\u7535\u5f71\u540d\u79f0 use movies ; select p . name , m . title from movie m , person p where m . director = p . id and m . director in ( select director from movie group by director having count ( * ) > 3 ); E3: \u67e5\u8be2\u524d\u5341\u4f4d\u7968\u623f\u62c5\u5f53\u6f14\u5458\uff0c\u5373\u8be5\u6f14\u5458\u53c2\u6f14\u7684\u6240\u6709\u7535\u5f71\u7684\u7d2f\u79ef\u7968\u623f\u6700\u9ad8 \u8f93\u51fa\uff1a\u6f14\u5458\u540d\u79f0\uff0c\u7d2f\u79ef\u7968\u623f use movies ; select mm . name , sum ( mm . revenue ) as sum_revenue from ( select p . name as name , m . revenue as revenue from person p , movie m , movie_actor ma where p . id = ma . actor_id and ma . movie_id = m . id ) as mm group by mm . name order by sum_revenue desc limit 10 ; Tasks Q1 \u67e5\u8be2\u4e0a\u6620\u65f6\u95f4 >= 2014\u5e74\u5e76\u4e14\u8bc4\u5206<=7.0\u7684\u7535\u5f71\uff0c \u8f93\u51fa:\u7535\u5f71\u6807\u9898\uff0c\u5bfc\u6f14\u59d3\u540d\uff0c\u8bc4\u5206( rating ) Q2 \u67e5\u8be2\u8fd9\u6837\u7684\u5bfc\u6f14\u59d3\u540d\uff08\u5728 movie . director \u4e2d\u6709\u8bb0\u5f55\u7684\u5373\u5bfc\u6f14\uff09\uff0c\u8fd9\u4e9b\u5bfc\u6f14\u6ca1\u6709\u5728\u4efb\u4f55\u4e00\u90e8\u7535\u5f71\u4e2d\u62c5\u4efb\u6f14\u5458\u3002 \u8f93\u51fa\uff1a\u5bfc\u6f14\u59d3\u540d Q3 \u67e5\u8be2 Edward Norton \u6216\u8005 Aamir Khan \u53c2\u6f14\u8fc7\u7684\u6240\u6709\u7535\u5f71 \u8f93\u51fa: \u7535\u5f71\u6807\u9898,\u8be5\u7535\u5f71\u7684\u4e0a\u6620\u65f6\u95f4 Q4 \u67e5\u8be2\u7c7b\u578b\u4e3a Action \u4e14 \u8bc4\u5206>8.0 \u7684\u7535\u5f71\uff0c\u5e76\u4e14\u8be5\u7535\u5f71\u7684\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71>=2\u90e8 \u8f93\u51fa:\u7535\u5f71\u6807\u9898,\u5bfc\u6f14\u59d3\u540d,\u8bc4\u5206 Q5 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u81f3\u5c11\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 Q6 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u4ec5\u4ec5\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 Q7 \u67e5\u8be2\u57282014\u5e74\u4e4b\u524d\uff08\u5305\u62ec2014\uff09\uff0c\u6709\u8d85\u8fc73\u90e8\u7535\u5f71\u4e0a\u6620\u7684\u6f14\u5458\u4ee5\u53ca\u4ed6\u53c2\u6f14\u7684\u7535\u5f71\u540d \u8f93\u51fa: \u6f14\u5458\u540d\uff0c\u53c2\u6f14\u7684\u7535\u5f71\u540d\uff0c Q8 \u67e5\u8be2\u6f14\u5458\uff0c\u8be5\u6f14\u5458\u53c2\u6f14\u4e86 Joss Whedon \u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\u3002 \u8f93\u51fa\uff1a\u6f14\u5458\u59d3\u540d Q9 \u67e5\u8be2\u8fd9\u6837\u7684\u6f14\u5458\u4e0e\u5bfc\u6f14\uff0c\u8fd9\u4e2a\u6f14\u5458\u53c2\u6f14\u4e86\u8be5\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\uff0c\u4e14\u8be5\u5bfc\u6f14\u5bfc\u6f14\u4e86\u81f3\u5c112\u90e8\u7535\u5f71\u3002 \u8f93\u51fa\uff1a \u6f14\u5458\u59d3\u540d\uff0c\u5bfc\u6f14\u59d3\u540d Q10 * Additional Question \u67e5\u8be2\u6bcf\u4e00\u79cd\u7c7b\u578b\u7535\u5f71\u5bf9\u5e94\u7684\u5f71\u5e1d/\u5f71\u540e\uff08\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7c7b\u578b\uff0c\u8be5\u5f71\u5e1d/\u5f71\u540e\u81f3\u5c11\u6709\u4e09\u90e8\u7535\u5f71\u662f\u8fd9\u4e2a\u7c7b\u578b\uff0c\u5e76\u4e14\u5728\u6240\u6709\u81f3\u5c11\u53c2\u6f14\u4e863\u90e8\u8be5\u7c7b\u578b\u7535\u5f71\u7684\u6f14\u5458\u4e2d\uff0c\u83b7\u5f97\u7684\u5e73\u5747\u8bc4\u5206\u6700\u9ad8\uff09 \u8f93\u51fa\uff1a \u7c7b\u578b\uff0c\u6f14\u5458\u540d\uff0c\u5e73\u5747\u8bc4\u5206","title":"Assignment-2"},{"location":"Assignment/assignment2/#assignment-2","text":"","title":"Assignment 2"},{"location":"Assignment/assignment2/#overview","text":"The second homework is to construct a set of SQL queries for data analysis. For this, we will provide some natural language level query questions that students will need to convert into sql statements. Students will also be required to run these sql queries and have them checked by the TAs in class . This task is an opportunity to: Learn basic and certain advanced SQL features Get familiar with using and applying sql in specific application scenarios Release Date: March 12, 2021 / 15:25 Due Date: March 12, 2021 / 17:10","title":"Overview"},{"location":"Assignment/assignment2/#preliminary","text":"","title":"Preliminary"},{"location":"Assignment/assignment2/#download","text":"You need to download the DataSet we have prepared for you in the elearning . movies.sql","title":"Download"},{"location":"Assignment/assignment2/#loading-data","text":"Open Mysql Workbench , click the corresponding tab to import movies.sql downloaded in the previous step. Then click the run button (It looks like \u26a1\ufe0f), you'll see a series of success logs below. Finally, click the refresh button in the sidebar. A schema called movies has been loaded sucessfully.","title":"Loading data"},{"location":"Assignment/assignment2/#simple-tutorials","text":"Hint Before writing SQL statements, please carefully observe the column name and structure of each table. A clearer understanding of the overall architecture will help you quickly and accurately finish this work.","title":"Simple tutorials"},{"location":"Assignment/assignment2/#table-structure","text":"Genre Column Type Example Id Int 1 Name Varchar \"Action\" movie Column Type Example Id Int 1 Title Varchar \"(500) Days of Summer\" Description Varchar \"Desc\" Director Int (person's id) 123 Year Int 2014 Length Int 95 Rating Double 8.0 Votes Int 9830 Revenue Double 98982.3 Metascore Int 76 movie_actor A movie can correspond to multiple actors Column Type Example Id Int 1 movie_id Int 1 actor_id Int 2 movie_genre A movie can correspond to multiple genres Column Type Example Id Int 1 movie_id Int 1 genre_id Int 2 person Column Type Example Id Int 1 Name Varchar \"amy\"","title":"Table Structure"},{"location":"Assignment/assignment2/#examples","text":"E1 \u67e5\u8be2 Edward Norton \u53c2\u6f14\u7684\u6240\u6709\u7535\u5f71\u7684\u6807\u9898 use movies ; select m . title from movie m , movie_actor ma , person p where m . id = ma . movie_id and p . id = ma . actor_id and p . name = 'Edward Norton' ; E2: \u67e5\u8be2\u6267\u5bfc\u7535\u5f71\u8d85\u8fc73\u90e8\u7684\u5bfc\u6f14\u540d\u79f0 \u8f93\u51fa: \u5bfc\u6f14\u540d\uff0c\u7535\u5f71\u540d\u79f0 use movies ; select p . name , m . title from movie m , person p where m . director = p . id and m . director in ( select director from movie group by director having count ( * ) > 3 ); E3: \u67e5\u8be2\u524d\u5341\u4f4d\u7968\u623f\u62c5\u5f53\u6f14\u5458\uff0c\u5373\u8be5\u6f14\u5458\u53c2\u6f14\u7684\u6240\u6709\u7535\u5f71\u7684\u7d2f\u79ef\u7968\u623f\u6700\u9ad8 \u8f93\u51fa\uff1a\u6f14\u5458\u540d\u79f0\uff0c\u7d2f\u79ef\u7968\u623f use movies ; select mm . name , sum ( mm . revenue ) as sum_revenue from ( select p . name as name , m . revenue as revenue from person p , movie m , movie_actor ma where p . id = ma . actor_id and ma . movie_id = m . id ) as mm group by mm . name order by sum_revenue desc limit 10 ;","title":"Examples"},{"location":"Assignment/assignment2/#tasks","text":"Q1 \u67e5\u8be2\u4e0a\u6620\u65f6\u95f4 >= 2014\u5e74\u5e76\u4e14\u8bc4\u5206<=7.0\u7684\u7535\u5f71\uff0c \u8f93\u51fa:\u7535\u5f71\u6807\u9898\uff0c\u5bfc\u6f14\u59d3\u540d\uff0c\u8bc4\u5206( rating ) Q2 \u67e5\u8be2\u8fd9\u6837\u7684\u5bfc\u6f14\u59d3\u540d\uff08\u5728 movie . director \u4e2d\u6709\u8bb0\u5f55\u7684\u5373\u5bfc\u6f14\uff09\uff0c\u8fd9\u4e9b\u5bfc\u6f14\u6ca1\u6709\u5728\u4efb\u4f55\u4e00\u90e8\u7535\u5f71\u4e2d\u62c5\u4efb\u6f14\u5458\u3002 \u8f93\u51fa\uff1a\u5bfc\u6f14\u59d3\u540d Q3 \u67e5\u8be2 Edward Norton \u6216\u8005 Aamir Khan \u53c2\u6f14\u8fc7\u7684\u6240\u6709\u7535\u5f71 \u8f93\u51fa: \u7535\u5f71\u6807\u9898,\u8be5\u7535\u5f71\u7684\u4e0a\u6620\u65f6\u95f4 Q4 \u67e5\u8be2\u7c7b\u578b\u4e3a Action \u4e14 \u8bc4\u5206>8.0 \u7684\u7535\u5f71\uff0c\u5e76\u4e14\u8be5\u7535\u5f71\u7684\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71>=2\u90e8 \u8f93\u51fa:\u7535\u5f71\u6807\u9898,\u5bfc\u6f14\u59d3\u540d,\u8bc4\u5206 Q5 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u81f3\u5c11\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 Q6 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u4ec5\u4ec5\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 Q7 \u67e5\u8be2\u57282014\u5e74\u4e4b\u524d\uff08\u5305\u62ec2014\uff09\uff0c\u6709\u8d85\u8fc73\u90e8\u7535\u5f71\u4e0a\u6620\u7684\u6f14\u5458\u4ee5\u53ca\u4ed6\u53c2\u6f14\u7684\u7535\u5f71\u540d \u8f93\u51fa: \u6f14\u5458\u540d\uff0c\u53c2\u6f14\u7684\u7535\u5f71\u540d\uff0c Q8 \u67e5\u8be2\u6f14\u5458\uff0c\u8be5\u6f14\u5458\u53c2\u6f14\u4e86 Joss Whedon \u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\u3002 \u8f93\u51fa\uff1a\u6f14\u5458\u59d3\u540d Q9 \u67e5\u8be2\u8fd9\u6837\u7684\u6f14\u5458\u4e0e\u5bfc\u6f14\uff0c\u8fd9\u4e2a\u6f14\u5458\u53c2\u6f14\u4e86\u8be5\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\uff0c\u4e14\u8be5\u5bfc\u6f14\u5bfc\u6f14\u4e86\u81f3\u5c112\u90e8\u7535\u5f71\u3002 \u8f93\u51fa\uff1a \u6f14\u5458\u59d3\u540d\uff0c\u5bfc\u6f14\u59d3\u540d Q10 * Additional Question \u67e5\u8be2\u6bcf\u4e00\u79cd\u7c7b\u578b\u7535\u5f71\u5bf9\u5e94\u7684\u5f71\u5e1d/\u5f71\u540e\uff08\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7c7b\u578b\uff0c\u8be5\u5f71\u5e1d/\u5f71\u540e\u81f3\u5c11\u6709\u4e09\u90e8\u7535\u5f71\u662f\u8fd9\u4e2a\u7c7b\u578b\uff0c\u5e76\u4e14\u5728\u6240\u6709\u81f3\u5c11\u53c2\u6f14\u4e863\u90e8\u8be5\u7c7b\u578b\u7535\u5f71\u7684\u6f14\u5458\u4e2d\uff0c\u83b7\u5f97\u7684\u5e73\u5747\u8bc4\u5206\u6700\u9ad8\uff09 \u8f93\u51fa\uff1a \u7c7b\u578b\uff0c\u6f14\u5458\u540d\uff0c\u5e73\u5747\u8bc4\u5206","title":"Tasks"},{"location":"Assignment/assignment3/","text":"Assignment 3 Overview The third homework is similar to the second.To reduce your workload, we have constructed data for two of the problems (3.7 & 3.13) in the paper-based homework, which was assigned on Tuesday. You need to run these sql statements in a live environment and return the correct results. Also, the homework submitted next Tuesday does not need to cover these two questions. This task is an opportunity to: Learn basic and certain advanced SQL features Get familiar with using and applying sql in specific application scenarios Release Date: March 19, 2021 / 15:25 Due Date: March 19, 2021 / 17:10 Preliminary Download and Load You need to download the DataSet we have prepared for you in the elearning . school.sql employment.sql The steps for downloading and importing are the same as for Assignment-2 Table Structure Hint Before writing SQL statements, please carefully observe the column name and structure of each table. A clearer understanding of the overall architecture will help you quickly and accurately finish this work. school.sql t => teacher Column Type Example Id Varchar T15 tname Varchar DI s => student Column Type Example Id Varchar S100 Sname Varchar YUE age Int 19 Sex Char(1) M c => course--teacher As the course name is not used in the query, we have not made up Column Type Example id Varchar C1 tid Varchar t10 sc => student--course Column Type Example sid Varchar S100 cid Varchar C10 Score Double 88.88 employment.sql comp => company Column Type Example Id Varchar C10 Cname Varchar Amazon emp Column Type Example Id Varchar S10 Ename Varchar Amy Age Int 60 Sex Char F works Column Type Example cId Varchar C10 eid Varchar S10 Salary Double 886 Tasks 3.7 -> school.sql Q1 \u7edf\u8ba1\u6709\u5b66\u751f\u9009\u4fee\u7684\u8bfe\u7a0b\u95e8\u6570 \u8f93\u51fa: count Q2 \u9009\u4feeC4\u8bfe\u7a0b\u7684\u5973\u5b66\u751f\u7684\u5e73\u5747\u5e74\u9f84 \u8f93\u51fa: avg_age Q3 LIU \u8001\u5e08\u6240\u6388\u8bfe\u7a0b\u7684\u6bcf\u95e8\u8bfe\u7a0b\u7684\u5e73\u5747\u6210\u7ee9 \u8bfe\u7a0bID\uff0c\u5e73\u5747\u6210\u7ee9 Q4 \u6bcf\u95e8\u8bfe\u7a0b\u7684\u5b66\u751f\u9009\u4fee\u4eba\u6570\uff0c\u5e76\u4e14\u53ea\u7edf\u8ba1\u9009\u8bfe\u4eba\u6570>10\u7684\u8bfe\u7a0b \u8f93\u51fa: \u8bfe\u7a0bID\uff0c\u4eba\u6570 \u6392\u5e8f\uff1a\u4eba\u6570\u964d\u5e8f\uff0c\u76f8\u540c\u5219\u6309\u8bfe\u7a0b\u53f7\u5347\u5e8f Q5 \u5b66\u53f7\u6bd4 WANG \u540c\u5b66\u5927\uff0c\u5e74\u9f84\u6bd4\u4ed6\u5c0f\u7684\u5b66\u751f\u59d3\u540d \u8f93\u51fa: \u5b66\u751f\u59d3\u540d Q6 \u8868SC\u4e2d\uff0c\u67e5\u627e\u6210\u7ee9\u4e3a\u7a7a\u7684\u5b66\u751f \u8f93\u51fa: \u5b66\u53f7\uff0c\u5b66\u751f\u59d3\u540d Q7 \u59d3\u540d\u4ee5 L \u6253\u5934\u7684\u6240\u6709\u5b66\u751f \u8f93\u51fa: \u59d3\u540d\uff0c\u5e74\u9f84 Q8 \u5e74\u9f84\u5927\u4e8e\u5973\u540c\u5b66\u5e73\u5747\u5e74\u9f84\u7684\u7537\u751f \u8f93\u51fa: \u59d3\u540d\uff0c \u5e74\u9f84 Q9 \u5e74\u9f84\u5927\u4e8e\u6240\u6709\u5973\u540c\u5b66\u5e74\u9f84\u7684\u7537\u751f \u8f93\u51fa: \u59d3\u540d\uff0c \u5e74\u9f84 3.13 -> employment.sql Q1 \u7528create table \u521b\u5efa\u4e09\u4e2a\u8868\u7684\u526f\u672c\uff0c\u547d\u540d\u4e3a xx_copy , xx \u4e3a\u539f\u8868\u540d \u9700\u8981\u6307\u51fa\u4e3b\u952e\u548c\u5916\u952e \u5e76\u4e14\u5bfc\u5165\u539f\u8868\u6240\u6709\u6570\u636e Q2 \u5e74\u9f84>50\u7684\u7537\u804c\u5de5\u7684\u5de5\u53f7\u548c\u59d3\u540d \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d Q3 \uff08\u4fee\u6539\u8fc7\uff09 \u67e5\u627e\u5728\u4e00\u4e2a\u4efb\u610f\u4e00\u4e2a\u516c\u53f8\u5de5\u8d44\u8d85\u8fc71000\u5143\u7684\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d \u53bb\u91cd Q4 \u81f3\u5c11\u5728 C4 \u548c C8 \u516c\u53f8\u517c\u804c\u7684\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d Q5 \u5728 Facebook \u5de5\u4f5c\uff0c\u5de5\u8d44\u8d85\u8fc71000\u5143\u7684\u7537\u6027\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c\u59d3\u540d Q6 \u6bcf\u4e2a\u804c\u5de5\u517c\u804c\u7684\u516c\u53f8\u6570\u76ee\u548c\u5de5\u8d44\u603b\u6570 \u8f93\u51fa: \u5de5\u53f7\uff0cNUM, SUM_SALARY Q7 \u67e5\u627e\u804c\u5de5\uff0c\u8be5\u804c\u5de5\u5728 S6 \u6240\u5728\u7684\u5168\u90e8\u516c\u53f8\u90fd\u6709\u517c\u804c \u8f93\u51fa: \u5de5\u53f7 Q8 \u5728 Tencent \u4e2d\u641c\u7d22\u4f4e\u4e8e\u672c\u516c\u53f8\u5e73\u5747\u5de5\u8d44\u7684\u5458\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c\u59d3\u540d Q9 \u5728Q1\u521b\u5efa\u7684\u526f\u672c\u4e2d\uff0c\u4e3a\u6bcf\u4e00\u4e2a\u516c\u53f8\u768450\u5c81\u4ee5\u4e0a\u7684\u5458\u5de5\u52a0\u85aa100\u5143 \u82e5\u804c\u5de5\u4e3a\u591a\u4e2a\u516c\u53f8\u5de5\u4f5c\uff0c\u53ef\u91cd\u590d\u52a0 Q10 \u5728Q1\u521b\u5efa\u7684\u526f\u672c\u4e2d\uff0c\u5220\u9664 emp_copy \u548c works_copy \u4e2d\u5e74\u9f84>60\u7684\u6709\u5173\u5143\u7ec4","title":"Assignment-3"},{"location":"Assignment/assignment3/#assignment-3","text":"","title":"Assignment 3"},{"location":"Assignment/assignment3/#overview","text":"The third homework is similar to the second.To reduce your workload, we have constructed data for two of the problems (3.7 & 3.13) in the paper-based homework, which was assigned on Tuesday. You need to run these sql statements in a live environment and return the correct results. Also, the homework submitted next Tuesday does not need to cover these two questions. This task is an opportunity to: Learn basic and certain advanced SQL features Get familiar with using and applying sql in specific application scenarios Release Date: March 19, 2021 / 15:25 Due Date: March 19, 2021 / 17:10","title":"Overview"},{"location":"Assignment/assignment3/#preliminary","text":"","title":"Preliminary"},{"location":"Assignment/assignment3/#download-and-load","text":"You need to download the DataSet we have prepared for you in the elearning . school.sql employment.sql The steps for downloading and importing are the same as for Assignment-2","title":"Download and Load"},{"location":"Assignment/assignment3/#table-structure","text":"Hint Before writing SQL statements, please carefully observe the column name and structure of each table. A clearer understanding of the overall architecture will help you quickly and accurately finish this work.","title":"Table Structure"},{"location":"Assignment/assignment3/#schoolsql","text":"t => teacher Column Type Example Id Varchar T15 tname Varchar DI s => student Column Type Example Id Varchar S100 Sname Varchar YUE age Int 19 Sex Char(1) M c => course--teacher As the course name is not used in the query, we have not made up Column Type Example id Varchar C1 tid Varchar t10 sc => student--course Column Type Example sid Varchar S100 cid Varchar C10 Score Double 88.88","title":"school.sql"},{"location":"Assignment/assignment3/#employmentsql","text":"comp => company Column Type Example Id Varchar C10 Cname Varchar Amazon emp Column Type Example Id Varchar S10 Ename Varchar Amy Age Int 60 Sex Char F works Column Type Example cId Varchar C10 eid Varchar S10 Salary Double 886","title":"employment.sql"},{"location":"Assignment/assignment3/#tasks","text":"","title":"Tasks"},{"location":"Assignment/assignment3/#37-schoolsql","text":"Q1 \u7edf\u8ba1\u6709\u5b66\u751f\u9009\u4fee\u7684\u8bfe\u7a0b\u95e8\u6570 \u8f93\u51fa: count Q2 \u9009\u4feeC4\u8bfe\u7a0b\u7684\u5973\u5b66\u751f\u7684\u5e73\u5747\u5e74\u9f84 \u8f93\u51fa: avg_age Q3 LIU \u8001\u5e08\u6240\u6388\u8bfe\u7a0b\u7684\u6bcf\u95e8\u8bfe\u7a0b\u7684\u5e73\u5747\u6210\u7ee9 \u8bfe\u7a0bID\uff0c\u5e73\u5747\u6210\u7ee9 Q4 \u6bcf\u95e8\u8bfe\u7a0b\u7684\u5b66\u751f\u9009\u4fee\u4eba\u6570\uff0c\u5e76\u4e14\u53ea\u7edf\u8ba1\u9009\u8bfe\u4eba\u6570>10\u7684\u8bfe\u7a0b \u8f93\u51fa: \u8bfe\u7a0bID\uff0c\u4eba\u6570 \u6392\u5e8f\uff1a\u4eba\u6570\u964d\u5e8f\uff0c\u76f8\u540c\u5219\u6309\u8bfe\u7a0b\u53f7\u5347\u5e8f Q5 \u5b66\u53f7\u6bd4 WANG \u540c\u5b66\u5927\uff0c\u5e74\u9f84\u6bd4\u4ed6\u5c0f\u7684\u5b66\u751f\u59d3\u540d \u8f93\u51fa: \u5b66\u751f\u59d3\u540d Q6 \u8868SC\u4e2d\uff0c\u67e5\u627e\u6210\u7ee9\u4e3a\u7a7a\u7684\u5b66\u751f \u8f93\u51fa: \u5b66\u53f7\uff0c\u5b66\u751f\u59d3\u540d Q7 \u59d3\u540d\u4ee5 L \u6253\u5934\u7684\u6240\u6709\u5b66\u751f \u8f93\u51fa: \u59d3\u540d\uff0c\u5e74\u9f84 Q8 \u5e74\u9f84\u5927\u4e8e\u5973\u540c\u5b66\u5e73\u5747\u5e74\u9f84\u7684\u7537\u751f \u8f93\u51fa: \u59d3\u540d\uff0c \u5e74\u9f84 Q9 \u5e74\u9f84\u5927\u4e8e\u6240\u6709\u5973\u540c\u5b66\u5e74\u9f84\u7684\u7537\u751f \u8f93\u51fa: \u59d3\u540d\uff0c \u5e74\u9f84","title":"3.7 -&gt; school.sql"},{"location":"Assignment/assignment3/#313-employmentsql","text":"Q1 \u7528create table \u521b\u5efa\u4e09\u4e2a\u8868\u7684\u526f\u672c\uff0c\u547d\u540d\u4e3a xx_copy , xx \u4e3a\u539f\u8868\u540d \u9700\u8981\u6307\u51fa\u4e3b\u952e\u548c\u5916\u952e \u5e76\u4e14\u5bfc\u5165\u539f\u8868\u6240\u6709\u6570\u636e Q2 \u5e74\u9f84>50\u7684\u7537\u804c\u5de5\u7684\u5de5\u53f7\u548c\u59d3\u540d \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d Q3 \uff08\u4fee\u6539\u8fc7\uff09 \u67e5\u627e\u5728\u4e00\u4e2a\u4efb\u610f\u4e00\u4e2a\u516c\u53f8\u5de5\u8d44\u8d85\u8fc71000\u5143\u7684\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d \u53bb\u91cd Q4 \u81f3\u5c11\u5728 C4 \u548c C8 \u516c\u53f8\u517c\u804c\u7684\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c \u59d3\u540d Q5 \u5728 Facebook \u5de5\u4f5c\uff0c\u5de5\u8d44\u8d85\u8fc71000\u5143\u7684\u7537\u6027\u804c\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c\u59d3\u540d Q6 \u6bcf\u4e2a\u804c\u5de5\u517c\u804c\u7684\u516c\u53f8\u6570\u76ee\u548c\u5de5\u8d44\u603b\u6570 \u8f93\u51fa: \u5de5\u53f7\uff0cNUM, SUM_SALARY Q7 \u67e5\u627e\u804c\u5de5\uff0c\u8be5\u804c\u5de5\u5728 S6 \u6240\u5728\u7684\u5168\u90e8\u516c\u53f8\u90fd\u6709\u517c\u804c \u8f93\u51fa: \u5de5\u53f7 Q8 \u5728 Tencent \u4e2d\u641c\u7d22\u4f4e\u4e8e\u672c\u516c\u53f8\u5e73\u5747\u5de5\u8d44\u7684\u5458\u5de5 \u8f93\u51fa: \u5de5\u53f7\uff0c\u59d3\u540d Q9 \u5728Q1\u521b\u5efa\u7684\u526f\u672c\u4e2d\uff0c\u4e3a\u6bcf\u4e00\u4e2a\u516c\u53f8\u768450\u5c81\u4ee5\u4e0a\u7684\u5458\u5de5\u52a0\u85aa100\u5143 \u82e5\u804c\u5de5\u4e3a\u591a\u4e2a\u516c\u53f8\u5de5\u4f5c\uff0c\u53ef\u91cd\u590d\u52a0 Q10 \u5728Q1\u521b\u5efa\u7684\u526f\u672c\u4e2d\uff0c\u5220\u9664 emp_copy \u548c works_copy \u4e2d\u5e74\u9f84>60\u7684\u6709\u5173\u5143\u7ec4","title":"3.13 -&gt; employment.sql"},{"location":"Project/project-1/","text":"Project-1 Overview The first project is to build an information management system . Students are required to use a relational database as the underlying storage and also need to provide a simple interface for presenting results. This project is an opportunity to: Understanding the use of databases in real-life applications Learn to design a reasonable data model architecture Learn how the code layer interacts with the database layer as well as the interface and logic Release Date: March 26, 2021 / 15:25 Due Date: April 23, 2021 / 17:10 April 30, 2021 / 17:10 Specification A basic information management system means adding , deleting , checking and changing data in specific application scenarios via an interface. (CRUD) So you need to think of an information system application scenario and implement it. Here are the specific requirements needed to complete, and to aid understanding, I will use the library management system as an example in the following sections. Databases You must use a relational database , but there are no restrictions on the exact. That means that you can use: Oracle DB2 SQL server Mysql postgresql Any you are familiar with you want to get familiar with The model design of the data must be reasonable The design of the data tables is paradigm compliant 3NF , CNF , BCNF ... or Star model , Snowflake model .... The fields are designed to be reasonable and overlap with the actual as far as possible Because it is up to you to decide what information system is about, you will need to find or randomly generate your own data In the school library management system: book category location user etc. Backend design Any language you like. Establishing connection communication with the database for \"CRUD\" For security, the database in the specific application is not allowed to be modified by direct access and all changes to the data have to be made through the code layer. Any modification to the data needs to be meaningful In the school library management system Borrowing and returning books Buy books for storage / Book abandonment out of storage Add freshmen and delete graduates Book Location Scheduling \uff08From Jiangwan to Handan\uff09 ...... There are at least two different types of user and clearly defined Authority management. Any information management system contains more than one type of user, so students need to implement at least two types of users with different functional privileges. In the school library management system: Student : Borrowing & Returning Books Teachers: Purchase Admin: Access rights management Hint The design and protection of priviledge is very important, so think carefully Frontend Design The front-end interface can be varied, but it must be user-friendly Web is recommanded Graphical interfaces can also be choosed : Qt , Microsoft Forms applications ... No unity Simple, easy to use and portable Technology stack Because of the multi-user , multi-authority application scenario of the information management system, we recommend you to write a web application as web pages are not restricted by the client. Django Full-stack Python Doc With Django, you can take Web applications from concept to launch in a matter of hours. Django takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source. Good packaging for manipulating the database Comes with its own back office administration page Flask+jinja2 Full-stack/Backend Python Doc Compared to django, it is much lighter and allows you more scope for your own design sqlalchemy Package of Python doc It provides a full suite of well known enterprise-level persistence patterns, designed for efficient and high-performing database access, adapted into a simple and Pythonic domain language. Good Orm Tools Bootstrap hmtl css js doc Quality web front-end templates Use it to optimise the interface Springboot Full-stack/Backend java Doc A powerful enterprise-class framework Echo backend go github a light server framework Egg.js backend node.js Doc better enterprise frameworks and apps with Node.js & Koa Frontend Framework frontend js css html Vue.js doc React.js doc Angule.js doc Submissions In April 23, students will need to come to the classroom to demonstrate to TAs in person package and uploade your application to elearning before April 23, 2021 / 23:59 A design document with: All your function points Your database design Application operating environment and how to run your project Submit two documents, one in pdf format and one in original format (word, markdown) Grading Items Weight Basic score 4 Good database design 2 Reasonable application scenarios and functional realisation(In particular, authority) 2 User-friendly interface 2 Document 2","title":"Project-1"},{"location":"Project/project-1/#project-1","text":"","title":"Project-1"},{"location":"Project/project-1/#overview","text":"The first project is to build an information management system . Students are required to use a relational database as the underlying storage and also need to provide a simple interface for presenting results. This project is an opportunity to: Understanding the use of databases in real-life applications Learn to design a reasonable data model architecture Learn how the code layer interacts with the database layer as well as the interface and logic Release Date: March 26, 2021 / 15:25 Due Date: April 23, 2021 / 17:10 April 30, 2021 / 17:10","title":"Overview"},{"location":"Project/project-1/#specification","text":"A basic information management system means adding , deleting , checking and changing data in specific application scenarios via an interface. (CRUD) So you need to think of an information system application scenario and implement it. Here are the specific requirements needed to complete, and to aid understanding, I will use the library management system as an example in the following sections.","title":"Specification"},{"location":"Project/project-1/#databases","text":"You must use a relational database , but there are no restrictions on the exact. That means that you can use: Oracle DB2 SQL server Mysql postgresql Any you are familiar with you want to get familiar with The model design of the data must be reasonable The design of the data tables is paradigm compliant 3NF , CNF , BCNF ... or Star model , Snowflake model .... The fields are designed to be reasonable and overlap with the actual as far as possible Because it is up to you to decide what information system is about, you will need to find or randomly generate your own data In the school library management system: book category location user etc.","title":"Databases"},{"location":"Project/project-1/#backend-design","text":"Any language you like. Establishing connection communication with the database for \"CRUD\" For security, the database in the specific application is not allowed to be modified by direct access and all changes to the data have to be made through the code layer. Any modification to the data needs to be meaningful In the school library management system Borrowing and returning books Buy books for storage / Book abandonment out of storage Add freshmen and delete graduates Book Location Scheduling \uff08From Jiangwan to Handan\uff09 ...... There are at least two different types of user and clearly defined Authority management. Any information management system contains more than one type of user, so students need to implement at least two types of users with different functional privileges. In the school library management system: Student : Borrowing & Returning Books Teachers: Purchase Admin: Access rights management Hint The design and protection of priviledge is very important, so think carefully","title":"Backend design"},{"location":"Project/project-1/#frontend-design","text":"The front-end interface can be varied, but it must be user-friendly Web is recommanded Graphical interfaces can also be choosed : Qt , Microsoft Forms applications ... No unity Simple, easy to use and portable","title":"Frontend Design"},{"location":"Project/project-1/#technology-stack","text":"Because of the multi-user , multi-authority application scenario of the information management system, we recommend you to write a web application as web pages are not restricted by the client. Django Full-stack Python Doc With Django, you can take Web applications from concept to launch in a matter of hours. Django takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source. Good packaging for manipulating the database Comes with its own back office administration page Flask+jinja2 Full-stack/Backend Python Doc Compared to django, it is much lighter and allows you more scope for your own design sqlalchemy Package of Python doc It provides a full suite of well known enterprise-level persistence patterns, designed for efficient and high-performing database access, adapted into a simple and Pythonic domain language. Good Orm Tools Bootstrap hmtl css js doc Quality web front-end templates Use it to optimise the interface Springboot Full-stack/Backend java Doc A powerful enterprise-class framework Echo backend go github a light server framework Egg.js backend node.js Doc better enterprise frameworks and apps with Node.js & Koa Frontend Framework frontend js css html Vue.js doc React.js doc Angule.js doc","title":"Technology stack"},{"location":"Project/project-1/#submissions","text":"In April 23, students will need to come to the classroom to demonstrate to TAs in person package and uploade your application to elearning before April 23, 2021 / 23:59 A design document with: All your function points Your database design Application operating environment and how to run your project Submit two documents, one in pdf format and one in original format (word, markdown)","title":"Submissions"},{"location":"Project/project-1/#grading","text":"Items Weight Basic score 4 Good database design 2 Reasonable application scenarios and functional realisation(In particular, authority) 2 User-friendly interface 2 Document 2","title":"Grading"},{"location":"Project/project-1%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E/","text":"Project-1 \u8865\u5145\u8bf4\u660e \u7edf\u4e00\u89e3\u7b54\u4e00\u4e9b\u7591\u95ee\uff1a \u6709\u540c\u5b66\u5b58\u5728\u65f6\u95f4\u95ee\u9898\uff0c\u4ee5\u53ca\u53cd\u6620\u671f\u4e2d\u5b63\u6709\u70b9\u5fd9\uff0c\u56e0\u6b64\u9a8c\u6536\u65f6\u95f4\u63a8\u540e\u4e00\u5468\uff0c\u6539\u4e3a 4\u670830\u5b9e\u9a8c\u8bfe\u65f6\u95f4 \uff0c \u9a8c\u6536\u5b8c\u5feb\u4e50\u8fc7\u4e94\u4e00 \u5173\u4e8e\u6700\u540e\u7684\u6587\u6863\uff0c\u9700\u8981\u8986\u76d6\u4e24\u90e8\u5206\u5185\u5bb9: \u7b2c\u4e00\u90e8\u5206 \u8bbe\u5b9a\u7684\u7cfb\u7edf \u662f\u4ec0\u4e48 \uff0c\u5728 \u54ea\u4e2a\u573a\u666f \u4e0b\u4f7f\u7528 \u8fd9\u4e2a\u7cfb\u7edf\u5728\u4f60\u8bbe\u5b9a\u7684\u573a\u666f\u4e0b\u9700\u8981\u5b9e\u73b0\u54ea\u4e9b\u529f\u80fd \uff08\u5373\u529f\u80fd\u9700\u6c42 \uff09 \u4e3e\u4e2a\ud83c\udf30\uff1a\u5b9e\u73b0\u7684\u662f\u7535\u5f71\u8bc4\u5206\u7cfb\u7edf\uff0c\u5219\u9700\u6c42\u4e3a\uff1a \u8be5\u7cfb\u7edf\u9700\u8981\u63d0\u4f9b\u5bf9\u6570\u636e\u5e93\u4e2d\u7535\u5f71\u7684\u67e5\u8be2\uff0c\u652f\u6301xx\u5b57\u6bb5\u7684\u6a21\u7cca\u7b5b\u9009 \u767b\u5f55\u7528\u6237\u53ef\u5bf9\u7535\u5f71\u8fdb\u884c\u63a8\u8350\u8bc4\u5206 .... \u7b2c\u4e8c\u90e8\u5206 \u4f60\u7684\u5b9e\u9a8c\u73af\u5883\uff08\u5e2e\u52a9TA\u6210\u529f\u8fd0\u884c\uff09 \ud83c\udf30 linux(debian)\uff0cg++.... \u200b \u8fd0\u884c\u65b9\u5f0f\u4e3a: \u200b g++ -o ..... bash start.sh \u4f60\u7684\u8bbe\u8ba1\u4eae\u70b9 \ud83c\udf30 \u6211\u7684\u6253\u5206\u7cfb\u7edf\u80fd\u81ea\u52a8\u5bf9\u7ed9\u5927\u91cf\u7535\u5f71\u6253\u5dee\u8bc4\u7684\u7528\u6237\u8fdb\u884c\u8bb0\u5f55\uff0c\u63a8\u9001\u5230\u7ba1\u7406\u5458 \u4f60\u7684\u6570\u636e\u5e93\u8bbe\u8ba1 \u628a\u8868\u7684\u5217\u8d34\u4e0a\u6765\u5c31\u597d \u5176\u4ed6\u4f60\u89c9\u5f97\u9700\u8981\u7684\u5185\u5bb9 \u6587\u6863\u5b57\u6570\u4e0d\u8981\u592a\u591a\uff01\u4e0d\u8981\u592a\u591a\uff01 \u6761\u7406\u6e05\u6670\u5373\u53ef","title":"Project-1 \u8865\u5145\u8bf4\u660e"},{"location":"Project/project-1%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E/#project-1","text":"\u7edf\u4e00\u89e3\u7b54\u4e00\u4e9b\u7591\u95ee\uff1a \u6709\u540c\u5b66\u5b58\u5728\u65f6\u95f4\u95ee\u9898\uff0c\u4ee5\u53ca\u53cd\u6620\u671f\u4e2d\u5b63\u6709\u70b9\u5fd9\uff0c\u56e0\u6b64\u9a8c\u6536\u65f6\u95f4\u63a8\u540e\u4e00\u5468\uff0c\u6539\u4e3a 4\u670830\u5b9e\u9a8c\u8bfe\u65f6\u95f4 \uff0c \u9a8c\u6536\u5b8c\u5feb\u4e50\u8fc7\u4e94\u4e00 \u5173\u4e8e\u6700\u540e\u7684\u6587\u6863\uff0c\u9700\u8981\u8986\u76d6\u4e24\u90e8\u5206\u5185\u5bb9: \u7b2c\u4e00\u90e8\u5206 \u8bbe\u5b9a\u7684\u7cfb\u7edf \u662f\u4ec0\u4e48 \uff0c\u5728 \u54ea\u4e2a\u573a\u666f \u4e0b\u4f7f\u7528 \u8fd9\u4e2a\u7cfb\u7edf\u5728\u4f60\u8bbe\u5b9a\u7684\u573a\u666f\u4e0b\u9700\u8981\u5b9e\u73b0\u54ea\u4e9b\u529f\u80fd \uff08\u5373\u529f\u80fd\u9700\u6c42 \uff09 \u4e3e\u4e2a\ud83c\udf30\uff1a\u5b9e\u73b0\u7684\u662f\u7535\u5f71\u8bc4\u5206\u7cfb\u7edf\uff0c\u5219\u9700\u6c42\u4e3a\uff1a \u8be5\u7cfb\u7edf\u9700\u8981\u63d0\u4f9b\u5bf9\u6570\u636e\u5e93\u4e2d\u7535\u5f71\u7684\u67e5\u8be2\uff0c\u652f\u6301xx\u5b57\u6bb5\u7684\u6a21\u7cca\u7b5b\u9009 \u767b\u5f55\u7528\u6237\u53ef\u5bf9\u7535\u5f71\u8fdb\u884c\u63a8\u8350\u8bc4\u5206 .... \u7b2c\u4e8c\u90e8\u5206 \u4f60\u7684\u5b9e\u9a8c\u73af\u5883\uff08\u5e2e\u52a9TA\u6210\u529f\u8fd0\u884c\uff09 \ud83c\udf30 linux(debian)\uff0cg++.... \u200b \u8fd0\u884c\u65b9\u5f0f\u4e3a: \u200b g++ -o ..... bash start.sh \u4f60\u7684\u8bbe\u8ba1\u4eae\u70b9 \ud83c\udf30 \u6211\u7684\u6253\u5206\u7cfb\u7edf\u80fd\u81ea\u52a8\u5bf9\u7ed9\u5927\u91cf\u7535\u5f71\u6253\u5dee\u8bc4\u7684\u7528\u6237\u8fdb\u884c\u8bb0\u5f55\uff0c\u63a8\u9001\u5230\u7ba1\u7406\u5458 \u4f60\u7684\u6570\u636e\u5e93\u8bbe\u8ba1 \u628a\u8868\u7684\u5217\u8d34\u4e0a\u6765\u5c31\u597d \u5176\u4ed6\u4f60\u89c9\u5f97\u9700\u8981\u7684\u5185\u5bb9 \u6587\u6863\u5b57\u6570\u4e0d\u8981\u592a\u591a\uff01\u4e0d\u8981\u592a\u591a\uff01 \u6761\u7406\u6e05\u6670\u5373\u53ef","title":"Project-1 \u8865\u5145\u8bf4\u660e"},{"location":"Project/project-2/","text":"Project-2: MyJQL In this project, you are going to implement a toy database which supports B-Tree indexing in C. You can use any system calls available in Ubuntu but you cannot link to any external libraries. Introduction to MyJQL MyJQL is a simplified database which has only one table of two columns. Its only table is defined to be: Column Type A int B varchar(11) A is an unsigned 31-bit integer, and B consists of the english alphabets and the numerical digits. B-Tree index is automatically created for column B . To run the database, you must specify the database file. If the database program is myjql , and the database file is myjql.db (which will be automatically created if it does not exist), you start the database by running ./myjql myjql.db . In this way, if you exit the database and restart it later with the same database file, your data will persist (instead of losing after exiting). JQL Syntax & Shell IO Format You must strictly follow the IO format, or you will fail all the tests! You may assume all the input is valid so that you don't need to handle any error. Prompt The database prints \"myjql> \" (no trailing new-line character '\\n' ) to wait for the input. Listing Order Since you are going to list the records, the listing order is crucial. Basically, the rules are: - The records are sorted by B in ascending order (determined by strcmp ). - If there are multiple records with the same B , these records are sorted by their time of insertion in descending order (The latest record will be listed first). Format of Records The format for any record is: (A, B) followed by '\\n' ( Space ' ' is after the ',' , not Tab '\\t' or any other). A and B are not enclosed in quotes ' or \" . When you are printing a list of records , it will be \"(Empty)\\n\" , if there are no records; or, use the format above to print the record(s) in the order mentioned earlier. Supported JQLs select : List all the records. Output: '\\n' followed by a list of records , and finally \"\\nExecuted.\\n\\n\" . select s : Find the record(s) whose B = s . Output: '\\n' followed by a list of records satisfying the select criterion, and finally \"\\nExecuted.\\n\\n\" . insert i s : Insert a record with A = i , B = s . Output: \"\\nExecuted.\\n\\n\" . delete s : Delete the record(s) whose B = s . Output: \"\\nExecuted.\\n\\n\" . .exit : Exit the database. This will always be the last input. Output: \"bye~\\n\" (no leading new-line character '\\n' ). i and s are both valid and they are not enclosed in quotes ' or \" . Sample Usage Start your database (assuming myjql.db does not exist): ./myjql myjql.db The interactions between you and your database are listed as follows: myjql> select (Empty) Executed. myjql> insert 1 a Executed. myjql> insert 2 b Executed. myjql> insert 3 d Executed. myjql> insert 4 c Executed. myjql> select (1, a) (2, b) (4, c) (3, d) Executed. myjql> insert 5 b Executed. myjql> insert 6 b Executed. myjql> select (1, a) (6, b) (5, b) (2, b) (4, c) (3, d) Executed. myjql> select b (6, b) (5, b) (2, b) Executed. myjql> delete b Executed. myjql> select (1, a) (4, c) (3, d) Executed. myjql> select b (Empty) Executed. myjql> delete e Executed. myjql> select (1, a) (4, c) (3, d) Executed. myjql> .exit bye~ Now, restart your database (without deleting myjql.db ): ./myjql myjql.db The interactions between you and your database are listed as follows: myjql> select (1, a) (4, c) (3, d) Executed. myjql> .exit bye~ Grading Method Total: 10 points You will get the points one step after another in the following order: If you 1) implement a B-Tree structure which can be serialized into (and deserialized from) the disk file, and 2) pass both the preliminary test (which you can download pj-2-pre-test.zip from the files in elearning) and the manual test (for database basic functions and persistence check), you have 5 points. If you pass the final test (which will not be provided) within the time limit, you have 3 points. If you pass the final test within the memory limit, you have 2 points. Pass a test means that the output of your database should be completely identical to that of the standard database. Standard database refers to my implementation. Disk space is unlimited. Testing Method Computer Hardware: CPU: Intel Xeon Silver 4114 @ 2.20GHz RAM: 128GB Operating System: Ubuntu 18.04.3 LTS GCC Version: 7.5.0 Compiling: gcc -o myjql myjql.c -O3 Executing: /usr/bin/time -v ./myjql myjql.db < in.txt > out.txt Comparing: diff out.txt ans.txt There should be no differences. Important metrics for the standard database: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:06.98 Maximum resident set size (kbytes): 1768 Your time limit and your memory limit are set to be 3:00.00 , and 6000 , respectively. Submission What you have to submit: a zip archive named [student_id]-[name]-pj-2.zip . When unzip it with unzip [student_id]-[name]-pj-2.zip . We should have the following directory structure: [student_id]-[name]-pj-2 |- doc.pdf |- myjql.c Your document should well explain the architecture of your database, and the algorithms for B-Tree operations if it is specially optimized. You should submit your zip archive to the corresponding assignment in elearning.","title":"Project-2"},{"location":"Project/project-2/#project-2-myjql","text":"In this project, you are going to implement a toy database which supports B-Tree indexing in C. You can use any system calls available in Ubuntu but you cannot link to any external libraries.","title":"Project-2: MyJQL"},{"location":"Project/project-2/#introduction-to-myjql","text":"MyJQL is a simplified database which has only one table of two columns. Its only table is defined to be: Column Type A int B varchar(11) A is an unsigned 31-bit integer, and B consists of the english alphabets and the numerical digits. B-Tree index is automatically created for column B . To run the database, you must specify the database file. If the database program is myjql , and the database file is myjql.db (which will be automatically created if it does not exist), you start the database by running ./myjql myjql.db . In this way, if you exit the database and restart it later with the same database file, your data will persist (instead of losing after exiting).","title":"Introduction to MyJQL"},{"location":"Project/project-2/#jql-syntax-shell-io-format","text":"You must strictly follow the IO format, or you will fail all the tests! You may assume all the input is valid so that you don't need to handle any error.","title":"JQL Syntax &amp; Shell IO Format"},{"location":"Project/project-2/#prompt","text":"The database prints \"myjql> \" (no trailing new-line character '\\n' ) to wait for the input.","title":"Prompt"},{"location":"Project/project-2/#listing-order","text":"Since you are going to list the records, the listing order is crucial. Basically, the rules are: - The records are sorted by B in ascending order (determined by strcmp ). - If there are multiple records with the same B , these records are sorted by their time of insertion in descending order (The latest record will be listed first).","title":"Listing Order"},{"location":"Project/project-2/#format-of-records","text":"The format for any record is: (A, B) followed by '\\n' ( Space ' ' is after the ',' , not Tab '\\t' or any other). A and B are not enclosed in quotes ' or \" . When you are printing a list of records , it will be \"(Empty)\\n\" , if there are no records; or, use the format above to print the record(s) in the order mentioned earlier.","title":"Format of Records"},{"location":"Project/project-2/#supported-jqls","text":"select : List all the records. Output: '\\n' followed by a list of records , and finally \"\\nExecuted.\\n\\n\" . select s : Find the record(s) whose B = s . Output: '\\n' followed by a list of records satisfying the select criterion, and finally \"\\nExecuted.\\n\\n\" . insert i s : Insert a record with A = i , B = s . Output: \"\\nExecuted.\\n\\n\" . delete s : Delete the record(s) whose B = s . Output: \"\\nExecuted.\\n\\n\" . .exit : Exit the database. This will always be the last input. Output: \"bye~\\n\" (no leading new-line character '\\n' ). i and s are both valid and they are not enclosed in quotes ' or \" .","title":"Supported JQLs"},{"location":"Project/project-2/#sample-usage","text":"Start your database (assuming myjql.db does not exist): ./myjql myjql.db The interactions between you and your database are listed as follows: myjql> select (Empty) Executed. myjql> insert 1 a Executed. myjql> insert 2 b Executed. myjql> insert 3 d Executed. myjql> insert 4 c Executed. myjql> select (1, a) (2, b) (4, c) (3, d) Executed. myjql> insert 5 b Executed. myjql> insert 6 b Executed. myjql> select (1, a) (6, b) (5, b) (2, b) (4, c) (3, d) Executed. myjql> select b (6, b) (5, b) (2, b) Executed. myjql> delete b Executed. myjql> select (1, a) (4, c) (3, d) Executed. myjql> select b (Empty) Executed. myjql> delete e Executed. myjql> select (1, a) (4, c) (3, d) Executed. myjql> .exit bye~ Now, restart your database (without deleting myjql.db ): ./myjql myjql.db The interactions between you and your database are listed as follows: myjql> select (1, a) (4, c) (3, d) Executed. myjql> .exit bye~","title":"Sample Usage"},{"location":"Project/project-2/#grading-method","text":"Total: 10 points You will get the points one step after another in the following order: If you 1) implement a B-Tree structure which can be serialized into (and deserialized from) the disk file, and 2) pass both the preliminary test (which you can download pj-2-pre-test.zip from the files in elearning) and the manual test (for database basic functions and persistence check), you have 5 points. If you pass the final test (which will not be provided) within the time limit, you have 3 points. If you pass the final test within the memory limit, you have 2 points. Pass a test means that the output of your database should be completely identical to that of the standard database. Standard database refers to my implementation. Disk space is unlimited.","title":"Grading Method"},{"location":"Project/project-2/#testing-method","text":"Computer Hardware: CPU: Intel Xeon Silver 4114 @ 2.20GHz RAM: 128GB Operating System: Ubuntu 18.04.3 LTS GCC Version: 7.5.0 Compiling: gcc -o myjql myjql.c -O3 Executing: /usr/bin/time -v ./myjql myjql.db < in.txt > out.txt Comparing: diff out.txt ans.txt There should be no differences. Important metrics for the standard database: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:06.98 Maximum resident set size (kbytes): 1768 Your time limit and your memory limit are set to be 3:00.00 , and 6000 , respectively.","title":"Testing Method"},{"location":"Project/project-2/#submission","text":"What you have to submit: a zip archive named [student_id]-[name]-pj-2.zip . When unzip it with unzip [student_id]-[name]-pj-2.zip . We should have the following directory structure: [student_id]-[name]-pj-2 |- doc.pdf |- myjql.c Your document should well explain the architecture of your database, and the algorithms for B-Tree operations if it is specially optimized. You should submit your zip archive to the corresponding assignment in elearning.","title":"Submission"}]}